{"version":3,"sources":["data/apiLinks.js","components/headerBar/HeaderBar.js","components/stateInfo/StateInfo.js","components/chart/ChartFilters.js","components/chart/Chart.js","components/chart/helpers.js","components/pieChartDisplay/PieChartDisplay.js","components/tableDisplay/TableFilters.js","components/tableDisplay/TableDisplay.js","components/tableDisplay/helpers.js","components/footer/Footer.js","components/dashboard/Dashboard.js","components/app/App.js","serviceWorker.js","index.js"],"names":["BASE_URL","urlStates","urlDaily","urlInfo","urlUSCurrent","urlUSHistoric","useStyles","makeStyles","theme","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","stateInput","margin","padding","background","toolbar","paddingRight","title","flexGrow","HeaderBar","props","selectState","statesInfo","changeState","classes","AppBar","position","className","clsx","Toolbar","variant","Typography","component","color","noWrap","FormControl","Select","native","onChange","value","target","inputProps","name","id","map","info","key","state","defaultProps","formatLink","link","Link","href","stateStats","fontSize","linkStyle","notes","fontStyle","StateInfo","selectStateInfo","selectStateCurrent","formatTitle","primaryLink","covid19Site","secondaryLink","covid19SiteSecondary","twitterLink","handle","replace","formatTwitter","twitter","grade","positive","toLocaleString","negative","totalTestResults","death","hospitalized","chartInputs","marginBottom","display","flexDirection","chartInput","ChartFilters","chartDisplay","chartDateRange","changeChartDisplay","changeChartDateRange","selectStateHistory","Chart","useTheme","displayType","isAreaChart","includes","data","filter","day","dayObj","dateType","lastWeek","moment","subtract","dateChecked","isAfter","lastMonth","filterDateRange","slice","reverse","time","format","amount","xAxis","dataKey","stroke","palette","text","secondary","yAxis","tickFormatter","tick","isNaN","angle","offset","style","textAnchor","fill","primary","type","getYLabel","cartesianGrid","strokeDasharray","toolTip","formatter","val","chartGradients","x1","y1","x2","y2","stopColor","main","stopOpacity","minHeight","top","right","bottom","left","fillOpacity","getRand","Math","floor","random","PieChartDisplay","statesCurrent","s","width","height","nameKey","_","index","rand1","rand2","rand3","fillColor","maxWidth","TableFilters","tableDisplay","changeTableDisplay","toUpperCase","tableHeader","alignItems","minWidth","tableSubtext","marginLeft","sortingColumnHeader","cursor","sortSelected","dark","TableDisplay","usCurrent","useState","sortOrder","setSortOrder","changeSortOrder","usTotals","getCountryTotals","statesData","sort","a","b","aPercent","bPercent","handleSort","Table","TableHead","TableRow","TableCell","TableBody","row","hash","positiveIncrease","negativeIncrease","totalTestResultsIncrease","toFixed","deathIncrease","deathRate","hospitalizedIncrease","onClick","Footer","align","root","appBarSpacer","mixins","content","overflow","container","paddingTop","spacing","paddingBottom","paper","chartPaper","tablePaper","overflowX","overflowY","Dashboard","statesHistoric","usHistoric","setSelectedState","setChartDisplay","setChartDateRange","setTableDisplay","find","CssBaseline","stateAbr","Container","Grid","item","xs","md","lg","Paper","Box","pt","App","setCurrentStates","setHistoricStates","setInfoStates","setUSCurrent","setUSHistoric","useEffect","fetch","then","res","json","catch","err","console","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yNAAMA,EAAW,gCAEJC,EAAS,UAAMD,EAAN,WACTE,EAAQ,UAAMF,EAAN,iBACRG,EAAO,UAAMH,EAAN,gBACPI,EAAY,UAAMJ,EAAN,OACZK,EAAa,UAAML,EAAN,a,GACF,UAAMA,EAAN,aACA,UAAMA,EAAN,SACQ,UAAMA,EAAN,gBACX,UAAMA,EAAN,U,yGCAfM,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCC,OAAQ,CACPC,OAAQF,EAAME,OAAOC,OAAS,EAC9BC,WAAYJ,EAAMK,YAAYC,OAAO,CAAC,QAAS,UAAW,CACzDC,OAAQP,EAAMK,YAAYE,OAAOC,MACjCC,SAAUT,EAAMK,YAAYI,SAASC,iBAGvCC,WAAY,CACXC,OAAQ,SACRC,QAAS,WACTC,WAAY,SAEbC,QAAS,CACRC,aAAc,IAEfC,MAAO,CACNC,SAAU,OAINC,EAAY,SAAAC,GAAU,IACnBC,EAAyCD,EAAzCC,YAAaC,EAA4BF,EAA5BE,WAAYC,EAAgBH,EAAhBG,YAC3BC,EAAU1B,IAMhB,OACC,kBAAC2B,EAAA,EAAD,CAAQC,SAAS,WAAWC,UAAWC,YAAKJ,EAAQvB,SACnD,kBAAC4B,EAAA,EAAD,CAASF,UAAWH,EAAQT,QAASe,QAAQ,SAC5C,kBAACC,EAAA,EAAD,CACCC,UAAU,KACVF,QAAQ,KACRG,MAAM,UACNC,QAAM,EACNP,UAAWH,EAAQP,OALpB,uBAUA,kBAACkB,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACCC,QAAM,EACNC,SApBqB,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MACtChB,EAAYgB,IAoBRZ,UAAWH,EAAQb,WACnB4B,MAAOlB,EACPoB,WAAY,CACXC,KAAM,eACNC,GAAI,iBAGL,4BAAQJ,MAAO,MAAf,OACCjB,EAAWsB,KAAI,SAAAC,GAAI,OACnB,4BAAQC,IAAKD,EAAKE,MAAOR,MAAOM,EAAKE,OACnCF,EAAKE,eAgBd5B,EAAU6B,aAAe,CACxB3B,YAAa,GACbC,WAAY,IAGEH,Q,SC/ET8B,EAAa,SAAAC,GAClB,OAAOA,EACN,kBAACC,EAAA,EAAD,CAAMlB,MAAM,UAAUmB,KAAMF,GAC1BA,GAGF,IA4BIpD,EAAYC,YAAW,CAC5BsD,WAAY,CACXC,SAAU,IAEXC,UAAW,CACVtB,MAAO,WAERuB,MAAO,CACN5C,OAAQ,EACR6C,UAAW,YAIPC,EAAY,SAAAtC,GAAU,IACnBuC,EAAqDvC,EAArDuC,gBAAiBC,EAAoCxC,EAApCwC,mBAAoBvC,EAAgBD,EAAhBC,YAEvCG,EAAU1B,IACVmB,EA3Ba,SAACI,EAAawB,GACjC,MAAoB,OAAhBxB,EACI,MAEJwB,EAAKH,KACF,GAAN,OAAUG,EAAKH,KAAf,aAAwBG,EAAKE,MAA7B,KAEM,iBAoBOc,CAAYxC,EAAasC,GACjCG,EAAcb,EAAWU,EAAgBI,aACzCC,EAAgBf,EAAWU,EAAgBM,sBAC3CC,EA5Ce,SAAAC,GACrB,IAAKA,EAAQ,MAAO,GAEpB,IAAMD,EAAW,UAfE,sBAeF,YAAqBC,EAAOC,QAAQ,IAAK,KAE1D,OAAOD,EACN,kBAAChB,EAAA,EAAD,CAAMlB,MAAM,UAAUmB,KAAMc,GAC1BA,GAGF,GAkCmBG,CAAcV,EAAgBW,SAElD,OACC,6BACC,kBAACvC,EAAA,EAAD,CAAYC,UAAU,KAAKF,QAAQ,KAAKG,MAAM,WAC5ChB,GAED2C,EAAmBW,OACnB,kBAACxC,EAAA,EAAD,CAAYC,UAAU,IAAIF,QAAQ,UAAUG,MAAM,iBAAlD,uBACsB2B,EAAmBW,OAI1C,kBAACxC,EAAA,EAAD,CACCC,UAAU,IACVF,QAAQ,QACRG,MAAM,cACNN,UAAWH,EAAQ6B,YAJpB,wBAMuB,IACrBO,EAAmBY,SACjBZ,EAAmBY,SAASC,iBAC5B,GAEJ,kBAAC1C,EAAA,EAAD,CACCC,UAAU,IACVF,QAAQ,QACRG,MAAM,cACNN,UAAWH,EAAQ6B,YAJpB,wBAMuB,IACrBO,EAAmBc,SACjBd,EAAmBc,SAASD,iBAC5B,GAEJ,kBAAC1C,EAAA,EAAD,CACCC,UAAU,IACVF,QAAQ,QACRG,MAAM,cACNN,UAAWH,EAAQ6B,YAJpB,uBAMsB,IACpBO,EAAmBe,iBACjBf,EAAmBe,iBAAiBF,iBACpC,GAEJ,kBAAC1C,EAAA,EAAD,CACCC,UAAU,IACVF,QAAQ,QACRG,MAAM,cACNN,UAAWH,EAAQ6B,YAJpB,gBAMe,IACbO,EAAmBgB,MACjBhB,EAAmBgB,MAAMH,iBACzB,GAEJ,kBAAC1C,EAAA,EAAD,CACCC,UAAU,IACVF,QAAQ,QACRG,MAAM,cACNN,UAAWH,EAAQ6B,YAJpB,sBAMqB,IACnBO,EAAmBiB,aACjBjB,EAAmBiB,aAAaJ,iBAChC,GAGJ,yBAAK9C,UAAWH,EAAQ+B,WAAYO,GACpC,yBAAKnC,UAAWH,EAAQ+B,WAAYS,GACpC,yBAAKrC,UAAWH,EAAQ+B,WAAYW,GAEpC,uBAAGvC,UAAWH,EAAQgC,OAAQG,EAAgBH,OAAS,MAU1DE,EAAUV,aAAe,CACxB3B,YAAa,GACbsC,gBAAiB,GACjBC,mBAAoB,IAGNF,Q,iCCjJT5D,EAAYC,YAAW,CAC5B+E,YAAa,CACZC,aAAc,EACdC,QAAS,OACTC,cAAe,OAEhBC,WAAY,CACXtE,OAAQ,QACRC,QAAS,KAILsE,EAAe,SAAA/D,GAAU,IAE7BgE,EAIGhE,EAJHgE,aACAC,EAGGjE,EAHHiE,eACAC,EAEGlE,EAFHkE,mBACAC,EACGnE,EADHmE,qBAGK/D,EAAU1B,IAEhB,OACC,yBAAK6B,UAAWH,EAAQsD,aACvB,kBAAC3C,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACCC,QAAM,EACNE,MAAO6C,EACP9C,SAAUgD,EACV3D,UAAWH,EAAQ0D,WACnBzC,WAAY,CACXC,KAAM,UACNC,GAAI,wBAGL,4BAAQJ,MAAM,YAAd,kBACA,4BAAQA,MAAM,SAAd,gBACA,4BAAQA,MAAM,oBAAd,gBACA,4BAAQA,MAAM,gBAAd,sBACA,4BAAQA,MAAM,oBAAd,wBACA,4BAAQA,MAAM,iBAAd,gBACA,4BAAQA,MAAM,4BAAd,sBACA,4BAAQA,MAAM,wBAAd,wBAIF,kBAACJ,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACCC,QAAM,EACNE,MAAO8C,EACP/C,SAAUiD,EACV5D,UAAWH,EAAQ0D,WACnBzC,WAAY,CACXC,KAAM,OACNC,GAAI,qBAGL,4BAAQJ,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,gBAcL4C,EAAanC,aAAe,CAC3BoC,aAAc,GACdC,eAAgB,GAChBzB,mBAAoB,GACpB4B,mBAAoB,IAGNL,QClDTM,EAAQ,SAAArE,GAAU,IACfoE,EAAqDpE,EAArDoE,mBAAoBJ,EAAiChE,EAAjCgE,aAAcC,EAAmBjE,EAAnBiE,eACpCrF,EAAQ0F,cAGRC,EAAcP,GAAgB,WAC9BQ,GAAeR,EAAaS,SAAS,YAGrCC,EAAON,EACXO,QAAO,SAAAC,GAAG,OA3BW,SAACC,EAAQC,GAChC,OAAQA,GACP,IAAK,OACJ,IAAMC,EAAWC,MAASC,SAAS,EAAG,QACtC,OAAOD,IAAOH,EAAOK,aAAaC,QAAQJ,GAE3C,IAAK,QACJ,IAAMK,EAAYJ,MAASC,SAAS,EAAG,UACvC,OAAOD,IAAOH,EAAOK,aAAaC,QAAQC,GAE3C,QACC,OAAO,GAgBOC,CAAgBT,EAAKX,MACnCqB,QACAC,UACA/D,KAAI,SAAAoD,GACJ,OAhBiBY,EAiBhBZ,EAAIM,YAAcF,IAAOJ,EAAIM,aAAaO,OAAO,WAAa,GAjBxCC,EAkBtBd,EAAIL,IAAgB,EAlBc,CAAEiB,OAAME,UAA3B,IAACF,EAAME,KAuBnBC,EAAQ,kBAAC,IAAD,CAAOC,QAAQ,OAAOC,OAAQjH,EAAMkH,QAAQC,KAAKC,YACzDC,EACL,kBAAC,IAAD,CACCJ,OAAQjH,EAAMkH,QAAQC,KAAKC,UAC3BE,cAAe,SAAAC,GAAI,OAAMC,MAAMD,GAAgC,GAAxBA,EAAK9C,mBAE5C,kBAAC,IAAD,CACCgD,MAAO,IACP/F,SAAS,OACTgG,OAAQ,GACRC,MAAO,CAAEC,WAAY,SAAUC,KAAM7H,EAAMkH,QAAQC,KAAKW,UCnEnC,SAAAC,GACxB,OAAQA,GACP,IAAK,WACJ,MAAO,wBAER,IAAK,QACJ,MAAO,eAER,IAAK,mBACJ,MAAO,eAER,IAAK,eACJ,MAAO,qBAER,IAAK,mBACJ,MAAO,uBAER,IAAK,gBACJ,MAAO,eAER,IAAK,2BACJ,MAAO,qBAER,IAAK,uBACJ,MAAO,qBAER,QACC,MAAO,ID0CLC,CAAUrC,KAIRsC,EAAgB,kBAAC,IAAD,CAAeC,gBAAgB,QAC/CC,EACL,kBAAC,IAAD,CAASC,UAAW,SAAAC,GAAG,OAAMb,MAAMa,GAA8B,GAAvBA,EAAI5D,oBAIzC6D,EACL,8BACC,oCAAgB3F,GAAG,OAAO4F,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACjD,0BACChB,OAAO,KACPiB,UAAW3I,EAAMkH,QAAQY,QAAQc,KACjCC,YAAa,KAEd,0BACCnB,OAAO,MACPiB,UAAW3I,EAAMkH,QAAQY,QAAQc,KACjCC,YAAa,MAMjB,OACC,kBAAC,WAAD,KACC,kBAAC,EAAiBzH,GAElB,kBAAC,IAAD,CAAqB0H,UAAW,KAC9BlD,EACA,kBAAC,IAAD,CACCE,KAAMA,EACNlF,OAAQ,CAAEmI,IAAK,EAAGC,MAAO,EAAGC,OAAQ,EAAGC,KAAM,KAE5CZ,EACAvB,EACAM,EACAY,EACAE,EACD,kBAAC,IAAD,CACCJ,KAAK,SACLf,QAAQ,SACRC,OAAQjH,EAAMkH,QAAQY,QAAQc,KAC9BO,YAAa,EACbtB,KAAK,gBAIP,kBAAC,IAAD,CACC/B,KAAMA,EACNlF,OAAQ,CAAEmI,IAAK,EAAGC,MAAO,EAAGC,OAAQ,EAAGC,KAAM,KAE5CnC,EACAM,EACAY,EACAE,EACD,kBAAC,IAAD,CAAKnB,QAAQ,SAASa,KAAM7H,EAAMkH,QAAQY,QAAQc,WAgBxDnD,EAAMzC,aAAe,CACpBoC,aAAc,GACdC,eAAgB,GAChBG,mBAAoB,IAGNC,QE/IT2D,EAAU,kBAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAGlDC,EAAkB,SAAApI,GAAU,IACzBqI,EAAkBrI,EAAlBqI,cACFzJ,EAAQ0F,cAGRI,EAAO2D,EAAc7G,KAAI,SAAA8G,GAAC,OAPbhH,EAO4BgH,EAAE3G,MAPxBR,EAO+BmH,EAAElF,SAPtB,CAAE9B,OAAMH,SAA1B,IAACG,EAAMH,KASzB,OACC,kBAAC,WAAD,KACC,kBAACR,EAAA,EAAD,CAAYC,UAAU,KAAKF,QAAQ,YAAYG,MAAM,WAArD,2BAGA,kBAAC,IAAD,CAAqB6G,UAAW,KAC/B,kBAAC,IAAD,CAAUa,MAAO,IAAKC,OAAQ,KAC7B,oCAAgBjH,GAAG,OAAO4F,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACjD,0BACChB,OAAO,KACPiB,UAAW3I,EAAMkH,QAAQY,QAAQc,KACjCC,YAAa,KAEd,0BACCnB,OAAO,MACPiB,UAAW3I,EAAMkH,QAAQY,QAAQc,KACjCC,YAAa,KAIf,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAK/C,KAAMA,EAAMkB,QAAQ,QAAQ6C,QAAQ,OAAOhC,KAAK,cACnD/B,EAAKlD,KAAI,SAACkH,EAAGC,GACb,IAAMC,EAAQZ,IACRa,EAAQb,IACRc,EAAQd,IACRe,EAAS,cAAUH,EAAV,aAAoBC,EAApB,aAA8BC,EAA9B,KAEf,OAAO,kBAAC,IAAD,CAAMpH,IAAG,eAAUiH,GAASlC,KAAMsC,YAahDX,EAAgBxG,aAAe,CAC9ByG,cAAe,IAGDD,I,6CCxDT1J,EAAYC,YAAW,CAC5BmF,WAAY,CACXtE,OAAQ,QACRC,QAAS,EACTuJ,SAAU,OAINC,EAAe,SAAAjJ,GAAU,IACtBkJ,EAAkDlJ,EAAlDkJ,aAAcC,EAAoCnJ,EAApCmJ,mBAAoBlJ,EAAgBD,EAAhBC,YACpCG,EAAU1B,IAEhB,OACC,kBAACqC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACCC,QAAM,EACNE,MAAO+H,EACPhI,SAAUiI,EACV5I,UAAWH,EAAQ0D,WACnBzC,WAAY,CACXC,KAAM,eACNC,GAAI,wBAGL,4BAAQJ,MAAM,WACZlB,EAAcA,EAAYmJ,cAAgB,GAD5C,YAGA,4BAAQjI,MAAM,aAAd,iBAYJ8H,EAAarH,aAAe,CAC3BsH,aAAc,GACdjJ,YAAa,IAGCgJ,QCpCTvK,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCyK,YAAa,CACZzF,QAAS,OACT0F,WAAY,SACZC,SAAU,KAEXC,aAAc,CACbC,WAAY,IAEbC,oBAAqB,CACpBC,OAAQ,UACR9I,MAAOjC,EAAMkH,QAAQY,QAAQc,MAE9BoC,aAAc,CACb/I,MAAOjC,EAAMkH,QAAQE,UAAU6D,UAI3BC,GAAe,SAAA9J,GAAU,IAE7BoE,EAMGpE,EANHoE,mBACAiE,EAKGrI,EALHqI,cACApI,EAIGD,EAJHC,YACA8J,EAGG/J,EAHH+J,UACAb,EAEGlJ,EAFHkJ,aACAC,EACGnJ,EADHmJ,mBAP4B,EAWKa,mBAAS,YAXd,mBAWtBC,EAXsB,KAWXC,EAXW,KAcvBC,EAAkB,SAAA7I,GAAI,OAAI4I,EAAa5I,IAGvClB,EAAU1B,KACV0L,EClDyB,WAAqB,IAApBL,EAAmB,uDAAP,GAC5C,OAAIA,EAAU,IAAMA,EAAU,GAAG3G,SACzB,CACNA,SAAU2G,EAAU,GAAG3G,SACvBE,SAAUyG,EAAU,GAAGzG,SACvBG,aAAcsG,EAAU,GAAGtG,aAC3BD,MAAOuG,EAAU,GAAGvG,MACpBD,iBAAkBwG,EAAU,GAAGxG,kBAI1B,CACNH,SAAU,EACVE,SAAU,EACVG,aAAc,EACdD,MAAO,EACPD,iBAAkB,GDkCF8G,CAAiBN,GAC5BO,EAAajC,EAAc/C,QAAQiF,KC/BhB,SAAAN,GAAS,OAAI,SAACO,EAAGC,GAC1C,GAAkB,oBAAdR,EAAiC,CAEpC,IAAMS,EAAWF,EAAEpH,SAAWoH,EAAEjH,iBAC1BoH,EAAWF,EAAErH,SAAWqH,EAAElH,iBAEhC,GAAImH,EAAWC,EAAU,OAAO,EAChC,GAAIA,EAAWD,EAAU,OAAQ,OAC3B,GAAkB,UAAdT,EAAuB,CACjC,GAAIO,EAAEP,GAAaQ,EAAER,GAAY,OAAQ,EACzC,GAAIQ,EAAER,GAAaO,EAAEP,GAAY,OAAO,MAClC,CACN,GAAIO,EAAEP,GAAaQ,EAAER,GAAY,OAAO,EACxC,GAAIQ,EAAER,GAAaO,EAAEP,GAAY,OAAQ,EAE1C,OAAO,GDgBuCW,CAAWX,IAEzD,OACC,kBAAC,WAAD,KACC,yBAAK1J,UAAWH,EAAQiJ,aACvB,kBAAC,EAAD,CACCH,aAAcA,EACdjJ,YAAaA,EACbkJ,mBAAoBA,IAErB,kBAACxI,EAAA,EAAD,CACCJ,UAAWH,EAAQoJ,aACnB5I,UAAU,IACVF,QAAQ,UACRG,MAAM,iBAEY,YAAjBqI,EACE,4DACA,sDAGa,YAAjBA,EACA,kBAAC2B,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,wBACA,kBAACA,EAAA,EAAD,uBACA,kBAACA,EAAA,EAAD,qBACA,kBAACA,EAAA,EAAD,8BACA,kBAACA,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,mBACA,kBAACA,EAAA,EAAD,uBAIF,kBAACC,EAAA,EAAD,KACE7G,EAAmB5C,KAAI,SAAA0J,GAAG,OAC1B,kBAACH,EAAA,EAAD,CAAUrJ,IAAKwJ,EAAIC,MAClB,kBAACH,EAAA,EAAD,KACEE,EAAIhG,YACFF,IAAOkG,EAAIhG,aAAaO,OAAO,cAC/B,IAEJ,kBAACuF,EAAA,EAAD,KACEE,EAAI9H,SAAW8H,EAAI9H,SAASC,iBAAmB,EADjD,MAEE6H,EAAIE,iBACFF,EAAIE,iBAAiB/H,iBACrB,EAJJ,KAOA,kBAAC2H,EAAA,EAAD,KACEE,EAAI5H,SAAW4H,EAAI5H,SAASD,iBAAmB,EADjD,MAEE6H,EAAIG,iBACFH,EAAIG,iBAAiBhI,iBACrB,EAJJ,KAOA,kBAAC2H,EAAA,EAAD,KACEE,EAAI3H,iBACF2H,EAAI3H,iBAAiBF,iBACrB,EAAG,IAHP,KAKE6H,EAAII,yBACFJ,EAAII,yBAAyBjI,iBAC7B,EAPJ,KAUA,kBAAC2H,EAAA,EAAD,KACEE,EAAI9H,UAAY8H,EAAI3H,kBAChB2H,EAAI9H,SAAW8H,EAAI3H,iBAAoB,KAAKgI,QAAQ,GACtD,IAEJ,kBAACP,EAAA,EAAD,KACEE,EAAI1H,MAAQ0H,EAAI1H,MAAMH,iBAAmB,EAD3C,MAEE6H,EAAIM,cAAgBN,EAAIM,cAAcnI,iBAAmB,EAF3D,KAIA,kBAAC2H,EAAA,EAAD,KAAYE,EAAIO,UAAYP,EAAIO,UAAY,IAC5C,kBAACT,EAAA,EAAD,KACEE,EAAIzH,aAAeyH,EAAIzH,aAAaJ,iBAAmB,EADzD,MAEE6H,EAAIQ,qBACFR,EAAIQ,qBAAqBrI,iBACzB,EAJJ,WAaJ,kBAACwH,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,0BACCzK,UAAWC,YACVJ,EAAQsJ,oBACM,UAAdO,GAAyB7J,EAAQwJ,cAElC+B,QAAS,kBAAMxB,EAAgB,WALhC,UAUD,kBAACa,EAAA,EAAD,KACC,0BACCzK,UAAWC,YACVJ,EAAQsJ,oBACM,aAAdO,GAA4B7J,EAAQwJ,cAErC+B,QAAS,kBAAMxB,EAAgB,cALhC,oBAUD,kBAACa,EAAA,EAAD,KACC,0BACCzK,UAAWC,YACVJ,EAAQsJ,oBACM,aAAdO,GAA4B7J,EAAQwJ,cAErC+B,QAAS,kBAAMxB,EAAgB,cALhC,oBAUD,kBAACa,EAAA,EAAD,KACC,0BACCzK,UAAWC,YACVJ,EAAQsJ,oBACM,qBAAdO,GAAoC7J,EAAQwJ,cAE7C+B,QAAS,kBAAMxB,EAAgB,sBALhC,iBAUD,kBAACa,EAAA,EAAD,CACCzK,UAAWC,YACVJ,EAAQsJ,oBACM,oBAAdO,GAAmC7J,EAAQwJ,cAE5C+B,QAAS,kBAAMxB,EAAgB,qBALhC,yBASA,kBAACa,EAAA,EAAD,KACC,0BACCzK,UAAWC,YACVJ,EAAQsJ,oBACM,UAAdO,GAAyB7J,EAAQwJ,cAElC+B,QAAS,kBAAMxB,EAAgB,WALhC,WAUD,kBAACa,EAAA,EAAD,KACC,0BACCzK,UAAWC,YACVJ,EAAQsJ,oBACM,cAAdO,GAA6B7J,EAAQwJ,cAEtC+B,QAAS,kBAAMxB,EAAgB,eALhC,eAUD,kBAACa,EAAA,EAAD,KACC,0BACCzK,UAAWC,YACVJ,EAAQsJ,oBACM,iBAAdO,GAAgC7J,EAAQwJ,cAEzC+B,QAAS,kBAAMxB,EAAgB,kBALhC,mBAaH,kBAACc,EAAA,EAAD,KACEX,EAAW9I,KAAI,SAAA0J,GAAG,OAClB,kBAACH,EAAA,EAAD,CAAUrJ,IAAKwJ,EAAIC,MAClB,kBAACH,EAAA,EAAD,KAAYE,EAAIvJ,OAChB,kBAACqJ,EAAA,EAAD,KACEE,EAAI9H,SAAW8H,EAAI9H,SAASC,iBAAmB,GADjD,KAEE6H,EAAI9H,UAAYgH,EAAShH,UACrB8H,EAAI9H,SAAWgH,EAAShH,SAAY,KAAKmI,QAAQ,GACnD,EAJJ,MAOA,kBAACP,EAAA,EAAD,KACEE,EAAI5H,SAAW4H,EAAI5H,SAASD,iBAAmB,GADjD,KAEE6H,EAAI5H,UAAY8G,EAAS9G,UACrB4H,EAAI5H,SAAW8G,EAAS9G,SAAY,KAAKiI,QAAQ,GACnD,EAJJ,MAOA,kBAACP,EAAA,EAAD,KACEE,EAAI3H,iBACF2H,EAAI3H,iBAAiBF,iBACrB,GAAI,IAHR,IAKE6H,EAAI3H,kBAAoB6G,EAAS7G,kBAE9B2H,EAAI3H,iBAAmB6G,EAAS7G,iBACjC,KACEgI,QAAQ,GACV,EAVJ,MAaA,kBAACP,EAAA,EAAD,KACEE,EAAI9H,UAAY8H,EAAI3H,kBAChB2H,EAAI9H,SAAW8H,EAAI3H,iBAAoB,KAAKgI,QAAQ,GACtD,IAEJ,kBAACP,EAAA,EAAD,KACEE,EAAI1H,MAAQ0H,EAAI1H,MAAMH,iBAAmB,EAD3C,KAEE6H,EAAI1H,OAAS4G,EAAS5G,OAClB0H,EAAI1H,MAAQ4G,EAAS5G,MAAS,KAAK+H,QAAQ,GAC7C,EAJJ,MAOA,kBAACP,EAAA,EAAD,KAAYE,EAAIO,UAAYP,EAAIO,UAAY,IAC5C,kBAACT,EAAA,EAAD,KACEE,EAAIzH,aAAeyH,EAAIzH,aAAaJ,iBAAmB,EADzD,KAEE6H,EAAIzH,cAAgB2G,EAAS3G,cAE1ByH,EAAIzH,aAAe2G,EAAS3G,aAC7B,KACE8H,QAAQ,GACV,EAPJ,cA4BRzB,GAAalI,aAAe,CAC3B3B,YAAa,GACbmE,mBAAoB,GACpBiE,cAAe,GACf0B,UAAW,GACXb,aAAc,WAGAY,UErSA8B,GAjBA,kBACd,kBAAC,WAAD,KACC,kBAACjL,EAAA,EAAD,CAAYD,QAAQ,QAAQG,MAAM,gBAAgBgL,MAAM,UACvD,kBAAC9J,EAAA,EAAD,CAAMlB,MAAM,UAAUmB,KAAK,2CAA3B,mCAGA,0BAAMuE,MAAO,CAAElE,UAAW,WAA1B,6BAED,kBAAC1B,EAAA,EAAD,CAAYD,QAAQ,QAAQG,MAAM,gBAAgBgL,MAAM,UACtD,iBACD,kBAAC9J,EAAA,EAAD,CAAMlB,MAAM,UAAUmB,KAAK,8BAA3B,iCCEGtD,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCkN,KAAM,CACLlI,QAAS,QAEVmI,aAAcnN,EAAMoN,OAAOrM,QAC3BsM,QAAS,CACRnM,SAAU,EACV0I,OAAQ,QACR0D,SAAU,QAEXC,UAAW,CACVC,WAAYxN,EAAMyN,QAAQ,GAC1BC,cAAe1N,EAAMyN,QAAQ,IAE9BE,MAAO,CACN9M,QAASb,EAAMyN,QAAQ,GACvBzI,QAAS,OACTC,cAAe,UAEhB2I,WAAY,CACXhE,OAAQ,KAETiE,WAAY,CACXC,UAAW,OACXC,UAAW,cAIPC,GAAY,SAAA5M,GAAU,IAE1BqI,EAKGrI,EALHqI,cACAwE,EAIG7M,EAJH6M,eACA3M,EAGGF,EAHHE,WACA6J,EAEG/J,EAFH+J,UACA+C,EACG9M,EADH8M,WANyB,EAUc9C,mBAAS,MAVvB,mBAUnB/J,EAVmB,KAUN8M,EAVM,OAWc/C,mBAAS,YAXvB,mBAWnBhG,EAXmB,KAWLgJ,EAXK,OAYkBhD,mBAAS,SAZ3B,mBAYnB/F,EAZmB,KAYHgJ,EAZG,OAacjD,mBAAS,WAbvB,mBAanBd,EAbmB,KAaLgE,EAbK,KA8BpB9M,EAAU1B,KAGV8D,EACW,OAAhBvC,EACG8J,EAAU,GACV1B,EAAc8E,MAAK,SAAA7E,GAAC,OAAIA,EAAE3G,QAAU1B,KAClCmE,EACW,OAAhBnE,EACG6M,EACAD,EAAelI,QAAO,SAAA2D,GAAC,OAAIA,EAAE3G,QAAU1B,KACrCsC,EAAkBrC,EAAWiN,MAAK,SAAA7E,GAAC,OAAIA,EAAE3G,QAAU1B,KAEzD,OACC,yBAAKM,UAAWH,EAAQ0L,MACvB,kBAACsB,EAAA,EAAD,MACA,kBAAC,EAAD,CACClN,WAAYA,EACZD,YAAaA,EACbE,YAjCiB,SAAAkN,GACnBN,EAAiBM,MAmChB,0BAAM9M,UAAWH,EAAQ6L,SACxB,yBAAK1L,UAAWH,EAAQ2L,eACxB,kBAACuB,EAAA,EAAD,CAAWtE,SAAS,KAAKzI,UAAWH,EAAQ+L,WAC3C,kBAACoB,EAAA,EAAD,CAAMpB,WAAS,EAACE,QAAS,GAExB,kBAACkB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC9B,kBAAC,EAAD,CACC1N,YAAaA,EACbsC,gBAAiBA,EACjBC,mBAAoBA,MAKrB,EASD,kBAAC+K,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC9B,kBAACC,EAAA,EAAD,CAAOrN,UAAWC,YAAKJ,EAAQmM,MAAOnM,EAAQoM,aAC7C,kBAAC,EAAD,CACCpI,mBAAoBA,EACpBJ,aAAcA,EACdC,eAAgBA,EAChBC,mBA9DmB,SAAC,GAA2B,IAAf/C,EAAc,EAAxBC,OAAUD,MACvC6L,EAAgB7L,IA8DTgD,qBA5DqB,SAAC,GAA2B,IAAfhD,EAAc,EAAxBC,OAAUD,MACzC8L,EAAkB9L,QAiEd,kBAACoM,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC9B,kBAACC,EAAA,EAAD,CAAOrN,UAAWC,YAAKJ,EAAQmM,MAAOnM,EAAQqM,aAC7C,kBAAC,GAAD,CACCxM,YAAaA,EACbiJ,aAAcA,EACd9E,mBAAoBA,EACpBiE,cAAeA,EACf0B,UAAWA,EACXZ,mBAvEmB,SAAC,GAA2B,IAAfhI,EAAc,EAAxBC,OAAUD,MACvC+L,EAAgB/L,SA4Eb,kBAAC0M,EAAA,EAAD,CAAKC,GAAI,GACR,kBAAC,GAAD,WAgBNlB,GAAUhL,aAAe,CACxByG,cAAe,GACfwE,eAAgB,GAChB3M,WAAY,GACZ6J,UAAW,GACX+C,WAAY,IAGEF,UC5FAmB,GA3EH,WAAM,MAEyB/D,mBAAS,IAFlC,mBAEV3B,EAFU,KAEK2F,EAFL,OAG2BhE,mBAAS,IAHpC,mBAGV6C,EAHU,KAGMoB,EAHN,OAImBjE,mBAAS,IAJ5B,mBAIV9J,EAJU,KAIEgO,EAJF,OAKiBlE,mBAAS,IAL1B,mBAKVD,EALU,KAKCoE,EALD,OAMmBnE,mBAAS,IAN5B,mBAMV8C,EANU,KAMEsB,EANF,KAgEjB,OAvDAC,qBAAU,WACTC,MAAMjQ,GACJkQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,WAAgB,IAAfE,EAAc,uDAAP,GACbT,EACCS,EAAKjN,KAAI,SAAAG,GAAK,sBACVA,EADU,CAEb8J,UACC9J,EAAM6B,OAAS7B,EAAMyB,UAChBzB,EAAM6B,MAAQ7B,EAAMyB,SAAY,KAAKmI,QAAQ,GAC/C,WAINmD,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAE7BL,MAAMhQ,GACJiQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIR,EAAkBQ,MAC/BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAE7BL,MAAM/P,GACJgQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACLP,EACCO,EAAKlE,MAAK,SAACC,EAAGC,GACb,OAAID,EAAE7I,MAAQ8I,EAAE9I,OAAe,EAC3B8I,EAAE9I,MAAQ6I,EAAE7I,MAAc,EACvB,SAIT+M,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAE7BL,MAAM9P,GACJ+P,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIN,EAAaM,MAC1BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAE7BL,MAAM7P,GACJ8P,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,WAAgB,IAAfE,EAAc,uDAAP,GACbL,EACCK,EAAKjN,KAAI,SAAAoD,GAAG,sBACRA,EADQ,CAEX6G,UACC7G,EAAIpB,OAASoB,EAAIxB,UACZwB,EAAIpB,MAAQoB,EAAIxB,SAAY,KAAKmI,QAAQ,GAC3C,WAINmD,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAC3B,IAGF,kBAAC,GAAD,CACCtG,cAAeA,EACfwE,eAAgBA,EAChB3M,WAAYA,EACZ6J,UAAWA,EACX+C,WAAYA,KC9DKgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,GAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMgB,c","file":"static/js/main.3558a8a9.chunk.js","sourcesContent":["const BASE_URL = 'https://covidtracking.com/api'\n\nexport const urlStates = `${BASE_URL}/states`\nexport const urlDaily = `${BASE_URL}/states/daily`\nexport const urlInfo = `${BASE_URL}/states/info`\nexport const urlUSCurrent = `${BASE_URL}/us`\nexport const urlUSHistoric = `${BASE_URL}/us/daily`\nexport const urlCounties = `${BASE_URL}/counties`\nexport const urlTrackers = `${BASE_URL}/urls`\nexport const urlStateScreenshots = `${BASE_URL}/screenshots`\nexport const urlPress = `${BASE_URL}/press`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport FormControl from '@material-ui/core/FormControl'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Select from '@material-ui/core/Select'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles(theme => ({\n\tappBar: {\n\t\tzIndex: theme.zIndex.drawer + 1,\n\t\ttransition: theme.transitions.create(['width', 'margin'], {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.leavingScreen\n\t\t})\n\t},\n\tstateInput: {\n\t\tmargin: '0 18px',\n\t\tpadding: '2px 12px',\n\t\tbackground: 'white'\n\t},\n\ttoolbar: {\n\t\tpaddingRight: 24 // keep right padding when drawer closed\n\t},\n\ttitle: {\n\t\tflexGrow: 1\n\t}\n}))\n\nconst HeaderBar = props => {\n\tconst { selectState, statesInfo, changeState } = props\n\tconst classes = useStyles()\n\n\tconst changeStateHelper = ({ target: { value } }) => {\n\t\tchangeState(value)\n\t}\n\n\treturn (\n\t\t<AppBar position=\"absolute\" className={clsx(classes.appBar)}>\n\t\t\t<Toolbar className={classes.toolbar} variant=\"dense\">\n\t\t\t\t<Typography\n\t\t\t\t\tcomponent=\"h1\"\n\t\t\t\t\tvariant=\"h6\"\n\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\tnoWrap\n\t\t\t\t\tclassName={classes.title}\n\t\t\t\t>\n\t\t\t\t\tUS COVID 19 Tracker\n\t\t\t\t</Typography>\n\n\t\t\t\t<FormControl>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tnative\n\t\t\t\t\t\tonChange={changeStateHelper}\n\t\t\t\t\t\tclassName={classes.stateInput}\n\t\t\t\t\t\tvalue={selectState}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\tname: 'stateDisplay',\n\t\t\t\t\t\t\tid: 'stateOptions'\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value={'us'}>USA</option>\n\t\t\t\t\t\t{statesInfo.map(info => (\n\t\t\t\t\t\t\t<option key={info.state} value={info.state}>\n\t\t\t\t\t\t\t\t{info.state}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Select>\n\t\t\t\t</FormControl>\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t)\n}\n\nHeaderBar.propTypes = {\n\tselectState: PropTypes.string,\n\tstatesInfo: PropTypes.array,\n\tchangeState: PropTypes.func.isRequired\n}\n\nHeaderBar.defaultProps = {\n\tselectState: '',\n\tstatesInfo: []\n}\n\nexport default HeaderBar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Link from '@material-ui/core/Link'\nimport Typography from '@material-ui/core/Typography'\n\nconst TWITTER_URL = 'https://twitter.com'\n\nconst formatLink = link => {\n\treturn link ? (\n\t\t<Link color=\"inherit\" href={link}>\n\t\t\t{link}\n\t\t</Link>\n\t) : (\n\t\t''\n\t)\n}\n\nconst formatTwitter = handle => {\n\tif (!handle) return ''\n\n\tconst twitterLink = `${TWITTER_URL}/${handle.replace('@', '')}`\n\n\treturn handle ? (\n\t\t<Link color=\"inherit\" href={twitterLink}>\n\t\t\t{twitterLink}\n\t\t</Link>\n\t) : (\n\t\t''\n\t)\n}\n\nconst formatTitle = (selectState, info) => {\n\tif (selectState === 'us') {\n\t\treturn 'USA'\n\t}\n\tif (info.name) {\n\t\treturn `${info.name} (${info.state})`\n\t}\n\treturn 'Select a State'\n}\n\nconst useStyles = makeStyles({\n\tstateStats: {\n\t\tfontSize: 14\n\t},\n\tlinkStyle: {\n\t\tcolor: '#e33371'\n\t},\n\tnotes: {\n\t\tmargin: 4,\n\t\tfontStyle: 'italic'\n\t}\n})\n\nconst StateInfo = props => {\n\tconst { selectStateInfo, selectStateCurrent, selectState } = props\n\n\tconst classes = useStyles()\n\tconst title = formatTitle(selectState, selectStateInfo)\n\tconst primaryLink = formatLink(selectStateInfo.covid19Site)\n\tconst secondaryLink = formatLink(selectStateInfo.covid19SiteSecondary)\n\tconst twitterLink = formatTwitter(selectStateInfo.twitter)\n\n\treturn (\n\t\t<div>\n\t\t\t<Typography component=\"h2\" variant=\"h6\" color=\"primary\">\n\t\t\t\t{title}\n\t\t\t</Typography>\n\t\t\t{selectStateCurrent.grade && (\n\t\t\t\t<Typography component=\"p\" variant=\"caption\" color=\"textSecondary\">\n\t\t\t\t\tData quality grade: {selectStateCurrent.grade}\n\t\t\t\t</Typography>\n\t\t\t)}\n\n\t\t\t<Typography\n\t\t\t\tcomponent=\"p\"\n\t\t\t\tvariant=\"body1\"\n\t\t\t\tcolor=\"textPrimary\"\n\t\t\t\tclassName={classes.stateStats}\n\t\t\t>\n\t\t\t\tTotal Positive Cases:{' '}\n\t\t\t\t{selectStateCurrent.positive\n\t\t\t\t\t? selectStateCurrent.positive.toLocaleString()\n\t\t\t\t\t: 0}\n\t\t\t</Typography>\n\t\t\t<Typography\n\t\t\t\tcomponent=\"p\"\n\t\t\t\tvariant=\"body1\"\n\t\t\t\tcolor=\"textPrimary\"\n\t\t\t\tclassName={classes.stateStats}\n\t\t\t>\n\t\t\t\tTotal Negative Cases:{' '}\n\t\t\t\t{selectStateCurrent.negative\n\t\t\t\t\t? selectStateCurrent.negative.toLocaleString()\n\t\t\t\t\t: 0}\n\t\t\t</Typography>\n\t\t\t<Typography\n\t\t\t\tcomponent=\"p\"\n\t\t\t\tvariant=\"body1\"\n\t\t\t\tcolor=\"textPrimary\"\n\t\t\t\tclassName={classes.stateStats}\n\t\t\t>\n\t\t\t\tTotal People Tested:{' '}\n\t\t\t\t{selectStateCurrent.totalTestResults\n\t\t\t\t\t? selectStateCurrent.totalTestResults.toLocaleString()\n\t\t\t\t\t: 0}\n\t\t\t</Typography>\n\t\t\t<Typography\n\t\t\t\tcomponent=\"p\"\n\t\t\t\tvariant=\"body1\"\n\t\t\t\tcolor=\"textPrimary\"\n\t\t\t\tclassName={classes.stateStats}\n\t\t\t>\n\t\t\t\tTotal Deaths:{' '}\n\t\t\t\t{selectStateCurrent.death\n\t\t\t\t\t? selectStateCurrent.death.toLocaleString()\n\t\t\t\t\t: 0}\n\t\t\t</Typography>\n\t\t\t<Typography\n\t\t\t\tcomponent=\"p\"\n\t\t\t\tvariant=\"body1\"\n\t\t\t\tcolor=\"textPrimary\"\n\t\t\t\tclassName={classes.stateStats}\n\t\t\t>\n\t\t\t\tTotal Hospitalized:{' '}\n\t\t\t\t{selectStateCurrent.hospitalized\n\t\t\t\t\t? selectStateCurrent.hospitalized.toLocaleString()\n\t\t\t\t\t: 0}\n\t\t\t</Typography>\n\n\t\t\t<div className={classes.linkStyle}>{primaryLink}</div>\n\t\t\t<div className={classes.linkStyle}>{secondaryLink}</div>\n\t\t\t<div className={classes.linkStyle}>{twitterLink}</div>\n\n\t\t\t<p className={classes.notes}>{selectStateInfo.notes || ''}</p>\n\t\t</div>\n\t)\n}\nStateInfo.propTypes = {\n\tselectState: PropTypes.string,\n\tselectStateInfo: PropTypes.object,\n\tselectStateCurrent: PropTypes.object\n}\n\nStateInfo.defaultProps = {\n\tselectState: '',\n\tselectStateInfo: {},\n\tselectStateCurrent: {}\n}\n\nexport default StateInfo\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\n\nconst useStyles = makeStyles({\n\tchartInputs: {\n\t\tmarginBottom: 6,\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row'\n\t},\n\tchartInput: {\n\t\tmargin: '0 6px',\n\t\tpadding: 2\n\t}\n})\n\nconst ChartFilters = props => {\n\tconst {\n\t\tchartDisplay,\n\t\tchartDateRange,\n\t\tchangeChartDisplay,\n\t\tchangeChartDateRange\n\t} = props\n\n\tconst classes = useStyles()\n\n\treturn (\n\t\t<div className={classes.chartInputs}>\n\t\t\t<FormControl>\n\t\t\t\t<Select\n\t\t\t\t\tnative\n\t\t\t\t\tvalue={chartDisplay}\n\t\t\t\t\tonChange={changeChartDisplay}\n\t\t\t\t\tclassName={classes.chartInput}\n\t\t\t\t\tinputProps={{\n\t\t\t\t\t\tname: 'display',\n\t\t\t\t\t\tid: 'chartDisplayOptions'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<option value=\"positive\">Total Positive</option>\n\t\t\t\t\t<option value=\"death\">Total Deaths</option>\n\t\t\t\t\t<option value=\"totalTestResults\">Total Tested</option>\n\t\t\t\t\t<option value=\"hospitalized\">Total Hospitalized</option>\n\t\t\t\t\t<option value=\"positiveIncrease\">Daily Positive Cases</option>\n\t\t\t\t\t<option value=\"deathIncrease\">Daily Deaths</option>\n\t\t\t\t\t<option value=\"totalTestResultsIncrease\">Daily Test Results</option>\n\t\t\t\t\t<option value=\"hospitalizedIncrease\">Daily Hospitalized</option>\n\t\t\t\t</Select>\n\t\t\t</FormControl>\n\n\t\t\t<FormControl>\n\t\t\t\t<Select\n\t\t\t\t\tnative\n\t\t\t\t\tvalue={chartDateRange}\n\t\t\t\t\tonChange={changeChartDateRange}\n\t\t\t\t\tclassName={classes.chartInput}\n\t\t\t\t\tinputProps={{\n\t\t\t\t\t\tname: 'date',\n\t\t\t\t\t\tid: 'chartDateOptions'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<option value=\"week\">Week</option>\n\t\t\t\t\t<option value=\"month\">Month</option>\n\t\t\t\t\t<option value=\"total\">All Time</option>\n\t\t\t\t</Select>\n\t\t\t</FormControl>\n\t\t</div>\n\t)\n}\n\nChartFilters.propTypes = {\n\tchartDisplay: PropTypes.string,\n\tchartDateRange: PropTypes.string,\n\tchangeChartDisplay: PropTypes.func.isRequired,\n\tchangeChartDateRange: PropTypes.func.isRequired\n}\n\nChartFilters.defaultProps = {\n\tchartDisplay: '',\n\tchartDateRange: '',\n\tselectStateCurrent: {},\n\tselectStateHistory: []\n}\n\nexport default ChartFilters\n","import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\nimport { useTheme } from '@material-ui/core/styles'\nimport {\n\tAreaChart,\n\tArea,\n\tBarChart,\n\tBar,\n\tXAxis,\n\tYAxis,\n\tLabel,\n\tCartesianGrid,\n\tTooltip,\n\tResponsiveContainer\n} from 'recharts'\nimport ChartFilters from './ChartFilters'\nimport { getYLabel } from './helpers'\n\nconst filterDateRange = (dayObj, dateType) => {\n\tswitch (dateType) {\n\t\tcase 'week':\n\t\t\tconst lastWeek = moment().subtract(7, 'days')\n\t\t\treturn moment(dayObj.dateChecked).isAfter(lastWeek)\n\n\t\tcase 'month':\n\t\t\tconst lastMonth = moment().subtract(1, 'months')\n\t\t\treturn moment(dayObj.dateChecked).isAfter(lastMonth)\n\n\t\tdefault:\n\t\t\treturn true\n\t}\n}\n\nconst createData = (time, amount) => ({ time, amount })\n\nconst Chart = props => {\n\tconst { selectStateHistory, chartDisplay, chartDateRange } = props\n\tconst theme = useTheme()\n\n\t// * Chart/Filter Display Options\n\tconst displayType = chartDisplay || 'positive'\n\tconst isAreaChart = !chartDisplay.includes('Increase')\n\n\t// * Chart Data\n\tconst data = selectStateHistory\n\t\t.filter(day => filterDateRange(day, chartDateRange))\n\t\t.slice()\n\t\t.reverse()\n\t\t.map(day => {\n\t\t\treturn createData(\n\t\t\t\tday.dateChecked ? moment(day.dateChecked).format('M/DD/YY') : '',\n\t\t\t\tday[displayType] || 0\n\t\t\t)\n\t\t})\n\n\t// * Chart Customized Inserts\n\tconst xAxis = <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\n\tconst yAxis = (\n\t\t<YAxis\n\t\t\tstroke={theme.palette.text.secondary}\n\t\t\ttickFormatter={tick => (!isNaN(tick) ? tick.toLocaleString() : '')}\n\t\t>\n\t\t\t<Label\n\t\t\t\tangle={270}\n\t\t\t\tposition=\"left\"\n\t\t\t\toffset={20}\n\t\t\t\tstyle={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\n\t\t\t>\n\t\t\t\t{getYLabel(displayType)}\n\t\t\t</Label>\n\t\t</YAxis>\n\t)\n\tconst cartesianGrid = <CartesianGrid strokeDasharray=\"3 3\" />\n\tconst toolTip = (\n\t\t<Tooltip formatter={val => (!isNaN(val) ? val.toLocaleString() : '')} />\n\t)\n\n\t// * Chart Gradients (for Area Chart)\n\tconst chartGradients = (\n\t\t<defs>\n\t\t\t<linearGradient id=\"main\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n\t\t\t\t<stop\n\t\t\t\t\toffset=\"5%\"\n\t\t\t\t\tstopColor={theme.palette.primary.main}\n\t\t\t\t\tstopOpacity={0.8}\n\t\t\t\t/>\n\t\t\t\t<stop\n\t\t\t\t\toffset=\"95%\"\n\t\t\t\t\tstopColor={theme.palette.primary.main}\n\t\t\t\t\tstopOpacity={0}\n\t\t\t\t/>\n\t\t\t</linearGradient>\n\t\t</defs>\n\t)\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<ChartFilters {...props} />\n\n\t\t\t<ResponsiveContainer minHeight={290}>\n\t\t\t\t{isAreaChart ? (\n\t\t\t\t\t<AreaChart\n\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\tmargin={{ top: 8, right: 8, bottom: 0, left: 30 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{chartGradients}\n\t\t\t\t\t\t{xAxis}\n\t\t\t\t\t\t{yAxis}\n\t\t\t\t\t\t{cartesianGrid}\n\t\t\t\t\t\t{toolTip}\n\t\t\t\t\t\t<Area\n\t\t\t\t\t\t\ttype=\"linear\"\n\t\t\t\t\t\t\tdataKey=\"amount\"\n\t\t\t\t\t\t\tstroke={theme.palette.primary.main}\n\t\t\t\t\t\t\tfillOpacity={1}\n\t\t\t\t\t\t\tfill=\"url(#main)\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</AreaChart>\n\t\t\t\t) : (\n\t\t\t\t\t<BarChart\n\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\tmargin={{ top: 8, right: 8, bottom: 0, left: 30 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{xAxis}\n\t\t\t\t\t\t{yAxis}\n\t\t\t\t\t\t{cartesianGrid}\n\t\t\t\t\t\t{toolTip}\n\t\t\t\t\t\t<Bar dataKey=\"amount\" fill={theme.palette.primary.main} />\n\t\t\t\t\t</BarChart>\n\t\t\t\t)}\n\t\t\t</ResponsiveContainer>\n\t\t</Fragment>\n\t)\n}\n\nChart.propTypes = {\n\tselectStateHistory: PropTypes.array,\n\tchartDisplay: PropTypes.string,\n\tchartDateRange: PropTypes.string,\n\tchangeChartDisplay: PropTypes.func.isRequired, // * Passed down to Filters\n\tchangeChartDateRange: PropTypes.func.isRequired // * Passed down to Filters\n}\n\nChart.defaultProps = {\n\tchartDisplay: '',\n\tchartDateRange: '',\n\tselectStateHistory: []\n}\n\nexport default Chart\n","export const getYLabel = type => {\n\tswitch (type) {\n\t\tcase 'positive':\n\t\t\treturn 'Total Tested Positive'\n\n\t\tcase 'death':\n\t\t\treturn 'Total Deaths'\n\n\t\tcase 'totalTestResults':\n\t\t\treturn 'Total Tested'\n\n\t\tcase 'hospitalized':\n\t\t\treturn 'Total Hospitalized'\n\n\t\tcase 'positiveIncrease':\n\t\t\treturn 'Daily Positive Cases'\n\n\t\tcase 'deathIncrease':\n\t\t\treturn 'Daily Deaths'\n\n\t\tcase 'totalTestResultsIncrease':\n\t\t\treturn 'Daily Test Results'\n\n\t\tcase 'hospitalizedIncrease':\n\t\t\treturn 'Daily Hospitalized'\n\n\t\tdefault:\n\t\t\treturn ''\n\t}\n}\n","import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { ResponsiveContainer, PieChart, Pie, Tooltip, Cell } from 'recharts'\n\n// * Helpers\nconst getRand = () => Math.floor(Math.random() * 120) + 80\nconst createData = (name, value) => ({ name, value })\n\nconst PieChartDisplay = props => {\n\tconst { statesCurrent } = props\n\tconst theme = useTheme()\n\n\t// * Chart Data\n\tconst data = statesCurrent.map(s => createData(s.state, s.positive))\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Typography component=\"h4\" variant=\"subtitle1\" color=\"primary\">\n\t\t\t\tPositive Cases by state\n\t\t\t</Typography>\n\t\t\t<ResponsiveContainer minHeight={290}>\n\t\t\t\t<PieChart width={300} height={300}>\n\t\t\t\t\t<linearGradient id=\"main\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n\t\t\t\t\t\t<stop\n\t\t\t\t\t\t\toffset=\"5%\"\n\t\t\t\t\t\t\tstopColor={theme.palette.primary.main}\n\t\t\t\t\t\t\tstopOpacity={0.8}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<stop\n\t\t\t\t\t\t\toffset=\"95%\"\n\t\t\t\t\t\t\tstopColor={theme.palette.primary.main}\n\t\t\t\t\t\t\tstopOpacity={0}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</linearGradient>\n\n\t\t\t\t\t<Tooltip />\n\t\t\t\t\t<Pie data={data} dataKey=\"value\" nameKey=\"name\" fill=\"url(#main)\">\n\t\t\t\t\t\t{data.map((_, index) => {\n\t\t\t\t\t\t\tconst rand1 = getRand()\n\t\t\t\t\t\t\tconst rand2 = getRand()\n\t\t\t\t\t\t\tconst rand3 = getRand()\n\t\t\t\t\t\t\tconst fillColor = `rgb(${rand1}, ${rand2}, ${rand3})`\n\n\t\t\t\t\t\t\treturn <Cell key={`cell-${index}`} fill={fillColor} />\n\t\t\t\t\t\t})}\n\t\t\t\t\t</Pie>\n\t\t\t\t</PieChart>\n\t\t\t</ResponsiveContainer>\n\t\t</Fragment>\n\t)\n}\n\nPieChartDisplay.propTypes = {\n\tstatesCurrent: PropTypes.array\n}\n\nPieChartDisplay.defaultProps = {\n\tstatesCurrent: []\n}\n\nexport default PieChartDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\n\nconst useStyles = makeStyles({\n\tchartInput: {\n\t\tmargin: '0 6px',\n\t\tpadding: 2,\n\t\tmaxWidth: 250\n\t}\n})\n\nconst TableFilters = props => {\n\tconst { tableDisplay, changeTableDisplay, selectState } = props\n\tconst classes = useStyles()\n\n\treturn (\n\t\t<FormControl>\n\t\t\t<Select\n\t\t\t\tnative\n\t\t\t\tvalue={tableDisplay}\n\t\t\t\tonChange={changeTableDisplay}\n\t\t\t\tclassName={classes.chartInput}\n\t\t\t\tinputProps={{\n\t\t\t\t\tname: 'tableDisplay',\n\t\t\t\t\tid: 'tableDisplayOptions'\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<option value=\"history\">\n\t\t\t\t\t{selectState ? selectState.toUpperCase() : ''} History\n\t\t\t\t</option>\n\t\t\t\t<option value=\"allStates\">All States</option>\n\t\t\t</Select>\n\t\t</FormControl>\n\t)\n}\n\nTableFilters.propTypes = {\n\ttableDisplay: PropTypes.string,\n\tselectState: PropTypes.string,\n\tchangeTableDisplay: PropTypes.func.isRequired\n}\n\nTableFilters.defaultProps = {\n\ttableDisplay: '',\n\tselectState: ''\n}\n\nexport default TableFilters\n","import React, { Fragment, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Typography from '@material-ui/core/Typography'\nimport TableFilters from '../tableDisplay/TableFilters'\nimport { getCountryTotals, handleSort } from './helpers'\n\nconst useStyles = makeStyles(theme => ({\n\ttableHeader: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tminWidth: 360\n\t},\n\ttableSubtext: {\n\t\tmarginLeft: 18\n\t},\n\tsortingColumnHeader: {\n\t\tcursor: 'pointer',\n\t\tcolor: theme.palette.primary.main\n\t},\n\tsortSelected: {\n\t\tcolor: theme.palette.secondary.dark\n\t}\n}))\n\nconst TableDisplay = props => {\n\tconst {\n\t\tselectStateHistory,\n\t\tstatesCurrent,\n\t\tselectState,\n\t\tusCurrent,\n\t\ttableDisplay,\n\t\tchangeTableDisplay\n\t} = props\n\n\t// * STATE\n\tconst [sortOrder, setSortOrder] = useState('positive')\n\n\t// * METHODS\n\tconst changeSortOrder = name => setSortOrder(name)\n\n\t// * MISC CONSTS\n\tconst classes = useStyles()\n\tconst usTotals = getCountryTotals(usCurrent)\n\tconst statesData = statesCurrent.slice().sort(handleSort(sortOrder))\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className={classes.tableHeader}>\n\t\t\t\t<TableFilters\n\t\t\t\t\ttableDisplay={tableDisplay}\n\t\t\t\t\tselectState={selectState}\n\t\t\t\t\tchangeTableDisplay={changeTableDisplay}\n\t\t\t\t/>\n\t\t\t\t<Typography\n\t\t\t\t\tclassName={classes.tableSubtext}\n\t\t\t\t\tcomponent=\"p\"\n\t\t\t\t\tvariant=\"caption\"\n\t\t\t\t\tcolor=\"textSecondary\"\n\t\t\t\t>\n\t\t\t\t\t{tableDisplay === 'history'\n\t\t\t\t\t\t? '* number in (parenthesis) = number of new daily increases'\n\t\t\t\t\t\t: '* number in (parenthesis) = percentage of country'}\n\t\t\t\t</Typography>\n\t\t\t</div>\n\t\t\t{tableDisplay === 'history' ? ( // * HISTORY\n\t\t\t\t<Table>\n\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableCell>Date</TableCell>\n\t\t\t\t\t\t\t<TableCell>Tested Positive</TableCell>\n\t\t\t\t\t\t\t<TableCell>Negative Tests</TableCell>\n\t\t\t\t\t\t\t<TableCell>Total Tested</TableCell>\n\t\t\t\t\t\t\t<TableCell>Positives / All Tests</TableCell>\n\t\t\t\t\t\t\t<TableCell>Deaths</TableCell>\n\t\t\t\t\t\t\t<TableCell>Death Rate</TableCell>\n\t\t\t\t\t\t\t<TableCell>Hospitalized</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableHead>\n\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{selectStateHistory.map(row => (\n\t\t\t\t\t\t\t<TableRow key={row.hash}>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.dateChecked\n\t\t\t\t\t\t\t\t\t\t? moment(row.dateChecked).format('MM/DD/YYYY')\n\t\t\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.positive ? row.positive.toLocaleString() : 0} (+\n\t\t\t\t\t\t\t\t\t{row.positiveIncrease\n\t\t\t\t\t\t\t\t\t\t? row.positiveIncrease.toLocaleString()\n\t\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.negative ? row.negative.toLocaleString() : 0} (+\n\t\t\t\t\t\t\t\t\t{row.negativeIncrease\n\t\t\t\t\t\t\t\t\t\t? row.negativeIncrease.toLocaleString()\n\t\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.totalTestResults\n\t\t\t\t\t\t\t\t\t\t? row.totalTestResults.toLocaleString()\n\t\t\t\t\t\t\t\t\t\t: 0}{' '}\n\t\t\t\t\t\t\t\t\t(+\n\t\t\t\t\t\t\t\t\t{row.totalTestResultsIncrease\n\t\t\t\t\t\t\t\t\t\t? row.totalTestResultsIncrease.toLocaleString()\n\t\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.positive && row.totalTestResults\n\t\t\t\t\t\t\t\t\t\t? ((row.positive / row.totalTestResults) * 100).toFixed(2)\n\t\t\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.death ? row.death.toLocaleString() : 0} (+\n\t\t\t\t\t\t\t\t\t{row.deathIncrease ? row.deathIncrease.toLocaleString() : 0})\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>{row.deathRate ? row.deathRate : ''}</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.hospitalized ? row.hospitalized.toLocaleString() : 0} (+\n\t\t\t\t\t\t\t\t\t{row.hospitalizedIncrease\n\t\t\t\t\t\t\t\t\t\t? row.hospitalizedIncrease.toLocaleString()\n\t\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t) : (\n\t\t\t\t// * STATES\n\t\t\t\t<Table>\n\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\t\t\tclasses.sortingColumnHeader,\n\t\t\t\t\t\t\t\t\t\tsortOrder === 'state' && classes.sortSelected\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('state')}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tState\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\t\t\tclasses.sortingColumnHeader,\n\t\t\t\t\t\t\t\t\t\tsortOrder === 'positive' && classes.sortSelected\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('positive')}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tTested Positive\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\t\t\tclasses.sortingColumnHeader,\n\t\t\t\t\t\t\t\t\t\tsortOrder === 'negative' && classes.sortSelected\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('negative')}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tTested Negative\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\t\t\tclasses.sortingColumnHeader,\n\t\t\t\t\t\t\t\t\t\tsortOrder === 'totalTestResults' && classes.sortSelected\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('totalTestResults')}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tTotal Tested\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\t\tclasses.sortingColumnHeader,\n\t\t\t\t\t\t\t\t\tsortOrder === 'percentPositive' && classes.sortSelected\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('percentPositive')}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tPositives / All Tests\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\t\t\tclasses.sortingColumnHeader,\n\t\t\t\t\t\t\t\t\t\tsortOrder === 'death' && classes.sortSelected\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('death')}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tDeaths\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\t\t\tclasses.sortingColumnHeader,\n\t\t\t\t\t\t\t\t\t\tsortOrder === 'deathRate' && classes.sortSelected\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('deathRate')}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tDeath Rate\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\t\t\tclasses.sortingColumnHeader,\n\t\t\t\t\t\t\t\t\t\tsortOrder === 'hospitalized' && classes.sortSelected\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('hospitalized')}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tHospitalized\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableHead>\n\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{statesData.map(row => (\n\t\t\t\t\t\t\t<TableRow key={row.hash}>\n\t\t\t\t\t\t\t\t<TableCell>{row.state}</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.positive ? row.positive.toLocaleString() : ''} (\n\t\t\t\t\t\t\t\t\t{row.positive && usTotals.positive\n\t\t\t\t\t\t\t\t\t\t? ((row.positive / usTotals.positive) * 100).toFixed(2)\n\t\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t\t%)\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.negative ? row.negative.toLocaleString() : ''} (\n\t\t\t\t\t\t\t\t\t{row.negative && usTotals.negative\n\t\t\t\t\t\t\t\t\t\t? ((row.negative / usTotals.negative) * 100).toFixed(2)\n\t\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t\t%)\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.totalTestResults\n\t\t\t\t\t\t\t\t\t\t? row.totalTestResults.toLocaleString()\n\t\t\t\t\t\t\t\t\t\t: ''}{' '}\n\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t{row.totalTestResults && usTotals.totalTestResults\n\t\t\t\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\t\t\t\t(row.totalTestResults / usTotals.totalTestResults) *\n\t\t\t\t\t\t\t\t\t\t\t\t100\n\t\t\t\t\t\t\t\t\t\t  ).toFixed(2)\n\t\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t\t%)\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.positive && row.totalTestResults\n\t\t\t\t\t\t\t\t\t\t? ((row.positive / row.totalTestResults) * 100).toFixed(2)\n\t\t\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.death ? row.death.toLocaleString() : 0} (\n\t\t\t\t\t\t\t\t\t{row.death && usTotals.death\n\t\t\t\t\t\t\t\t\t\t? ((row.death / usTotals.death) * 100).toFixed(2)\n\t\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t\t%)\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>{row.deathRate ? row.deathRate : ''}</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t{row.hospitalized ? row.hospitalized.toLocaleString() : 0} (\n\t\t\t\t\t\t\t\t\t{row.hospitalized && usTotals.hospitalized\n\t\t\t\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\t\t\t\t(row.hospitalized / usTotals.hospitalized) *\n\t\t\t\t\t\t\t\t\t\t\t\t100\n\t\t\t\t\t\t\t\t\t\t  ).toFixed(2)\n\t\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t\t%)\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t)}\n\t\t</Fragment>\n\t)\n}\n\nTableDisplay.propTypes = {\n\tselectState: PropTypes.string,\n\ttableDisplay: PropTypes.string,\n\tselectStateHistory: PropTypes.array,\n\tstatesCurrent: PropTypes.array,\n\tusCurrent: PropTypes.array,\n\tchangeTableDisplay: PropTypes.func.isRequired\n}\n\nTableDisplay.defaultProps = {\n\tselectState: '',\n\tselectStateHistory: [],\n\tstatesCurrent: [],\n\tusCurrent: [],\n\ttableDisplay: 'history'\n}\n\nexport default TableDisplay\n","export const getCountryTotals = (usCurrent = []) => {\n\tif (usCurrent[0] && usCurrent[0].positive) {\n\t\treturn {\n\t\t\tpositive: usCurrent[0].positive,\n\t\t\tnegative: usCurrent[0].negative,\n\t\t\thospitalized: usCurrent[0].hospitalized,\n\t\t\tdeath: usCurrent[0].death,\n\t\t\ttotalTestResults: usCurrent[0].totalTestResults\n\t\t}\n\t}\n\n\treturn {\n\t\tpositive: 0,\n\t\tnegative: 0,\n\t\thospitalized: 0,\n\t\tdeath: 0,\n\t\ttotalTestResults: 0\n\t}\n}\n\nexport const handleSort = sortOrder => (a, b) => {\n\tif (sortOrder === 'percentPositive') {\n\t\t// ? This is the wrong kind of \"Percentage of positive\" - would need to bring in state population data to do this properly\n\t\tconst aPercent = a.positive / a.totalTestResults\n\t\tconst bPercent = b.positive / b.totalTestResults\n\n\t\tif (aPercent < bPercent) return 1\n\t\tif (bPercent < aPercent) return -1\n\t} else if (sortOrder === 'state') {\n\t\tif (a[sortOrder] < b[sortOrder]) return -1\n\t\tif (b[sortOrder] < a[sortOrder]) return 1\n\t} else {\n\t\tif (a[sortOrder] < b[sortOrder]) return 1\n\t\tif (b[sortOrder] < a[sortOrder]) return -1\n\t}\n\treturn 0\n}\n","import React, { Fragment } from 'react'\nimport Link from '@material-ui/core/Link'\nimport Typography from '@material-ui/core/Typography'\n\nconst Footer = () => (\n\t<Fragment>\n\t\t<Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n\t\t\t<Link color=\"inherit\" href=\"https://github.com/perryf/covid-tracker\">\n\t\t\t\tUS COVID 19 Tracker Source Code\n\t\t\t</Link>\n\t\t\t<span style={{ fontStyle: 'italic' }}> © Perry Fustero 2020</span>\n\t\t</Typography>\n\t\t<Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n\t\t\t{'All data from '}\n\t\t\t<Link color=\"inherit\" href=\"https://covidtracking.com/\">\n\t\t\t\tThe COVID Tracking Project\n\t\t\t</Link>\n\t\t</Typography>\n\t</Fragment>\n)\n\nexport default Footer\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport HeaderBar from '../headerBar/HeaderBar'\nimport StateInfo from '../stateInfo/StateInfo'\nimport Chart from '../chart/Chart'\nimport PieChartDisplay from '../pieChartDisplay/PieChartDisplay'\nimport TableDisplay from '../tableDisplay/TableDisplay'\nimport Footer from '../footer/Footer'\n\nconst useStyles = makeStyles(theme => ({\n\troot: {\n\t\tdisplay: 'flex'\n\t},\n\tappBarSpacer: theme.mixins.toolbar, // Moves main down by amount appBar takes up\n\tcontent: {\n\t\tflexGrow: 1,\n\t\theight: '100vh',\n\t\toverflow: 'auto'\n\t},\n\tcontainer: {\n\t\tpaddingTop: theme.spacing(1),\n\t\tpaddingBottom: theme.spacing(1)\n\t},\n\tpaper: {\n\t\tpadding: theme.spacing(2),\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column'\n\t},\n\tchartPaper: {\n\t\theight: 360\n\t},\n\ttablePaper: {\n\t\toverflowX: 'auto',\n\t\toverflowY: 'hidden'\n\t}\n}))\n\nconst Dashboard = props => {\n\tconst {\n\t\tstatesCurrent,\n\t\tstatesHistoric,\n\t\tstatesInfo,\n\t\tusCurrent,\n\t\tusHistoric\n\t} = props\n\n\t// * STATE\n\tconst [selectState, setSelectedState] = useState('us')\n\tconst [chartDisplay, setChartDisplay] = useState('positive')\n\tconst [chartDateRange, setChartDateRange] = useState('total')\n\tconst [tableDisplay, setTableDisplay] = useState('history')\n\n\t// * METHODS\n\tconst changeState = stateAbr => {\n\t\tsetSelectedState(stateAbr)\n\t}\n\tconst changeChartDisplay = ({ target: { value } }) => {\n\t\tsetChartDisplay(value)\n\t}\n\tconst changeChartDateRange = ({ target: { value } }) => {\n\t\tsetChartDateRange(value)\n\t}\n\tconst changeTableDisplay = ({ target: { value } }) => {\n\t\tsetTableDisplay(value)\n\t}\n\n\t// * STYLES\n\tconst classes = useStyles()\n\n\t// * INCLUDES US TOTALS WITH STATES\n\tconst selectStateCurrent =\n\t\tselectState === 'us'\n\t\t\t? usCurrent[0]\n\t\t\t: statesCurrent.find(s => s.state === selectState)\n\tconst selectStateHistory =\n\t\tselectState === 'us'\n\t\t\t? usHistoric\n\t\t\t: statesHistoric.filter(s => s.state === selectState)\n\tconst selectStateInfo = statesInfo.find(s => s.state === selectState)\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<CssBaseline />\n\t\t\t<HeaderBar\n\t\t\t\tstatesInfo={statesInfo}\n\t\t\t\tselectState={selectState}\n\t\t\t\tchangeState={changeState}\n\t\t\t/>\n\n\t\t\t<main className={classes.content}>\n\t\t\t\t<div className={classes.appBarSpacer} />\n\t\t\t\t<Container maxWidth=\"lg\" className={classes.container}>\n\t\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t\t{/* StateInfo */}\n\t\t\t\t\t\t<Grid item xs={12} md={12} lg={12}>\n\t\t\t\t\t\t\t<StateInfo\n\t\t\t\t\t\t\t\tselectState={selectState}\n\t\t\t\t\t\t\t\tselectStateInfo={selectStateInfo}\n\t\t\t\t\t\t\t\tselectStateCurrent={selectStateCurrent}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t{/* Pie Chart (Only on US View) */}\n\t\t\t\t\t\t{false && ( // * Maybe add in later\n\t\t\t\t\t\t\t<Grid item xs={6} md={6} lg={6}>\n\t\t\t\t\t\t\t\t<Paper className={clsx(classes.paper, classes.chartPaper)}>\n\t\t\t\t\t\t\t\t\t<PieChartDisplay statesCurrent={statesCurrent} />\n\t\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t{/* Chart */}\n\t\t\t\t\t\t<Grid item xs={12} md={12} lg={12}>\n\t\t\t\t\t\t\t<Paper className={clsx(classes.paper, classes.chartPaper)}>\n\t\t\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\t\t\tselectStateHistory={selectStateHistory}\n\t\t\t\t\t\t\t\t\tchartDisplay={chartDisplay}\n\t\t\t\t\t\t\t\t\tchartDateRange={chartDateRange}\n\t\t\t\t\t\t\t\t\tchangeChartDisplay={changeChartDisplay}\n\t\t\t\t\t\t\t\t\tchangeChartDateRange={changeChartDateRange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t{/* Recent Table */}\n\t\t\t\t\t\t<Grid item xs={12} md={12} lg={12}>\n\t\t\t\t\t\t\t<Paper className={clsx(classes.paper, classes.tablePaper)}>\n\t\t\t\t\t\t\t\t<TableDisplay\n\t\t\t\t\t\t\t\t\tselectState={selectState}\n\t\t\t\t\t\t\t\t\ttableDisplay={tableDisplay}\n\t\t\t\t\t\t\t\t\tselectStateHistory={selectStateHistory}\n\t\t\t\t\t\t\t\t\tstatesCurrent={statesCurrent}\n\t\t\t\t\t\t\t\t\tusCurrent={usCurrent}\n\t\t\t\t\t\t\t\t\tchangeTableDisplay={changeTableDisplay}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Box pt={4}>\n\t\t\t\t\t\t<Footer />\n\t\t\t\t\t</Box>\n\t\t\t\t</Container>\n\t\t\t</main>\n\t\t</div>\n\t)\n}\n\nDashboard.propTypes = {\n\tstatesCurrent: PropTypes.array,\n\tstatesHistoric: PropTypes.array,\n\tstatesInfo: PropTypes.array,\n\tusCurrent: PropTypes.array,\n\tusHistoric: PropTypes.array\n}\n\nDashboard.defaultProps = {\n\tstatesCurrent: [],\n\tstatesHistoric: [],\n\tstatesInfo: [],\n\tusCurrent: [],\n\tusHistoric: []\n}\n\nexport default Dashboard\n","import React, { useState, useEffect } from 'react'\nimport { urlStates, urlDaily, urlInfo, urlUSCurrent, urlUSHistoric } from 'data'\nimport Dashboard from '../dashboard/Dashboard'\n\nconst App = () => {\n\t// * State Init\n\tconst [statesCurrent, setCurrentStates] = useState([])\n\tconst [statesHistoric, setHistoricStates] = useState([])\n\tconst [statesInfo, setInfoStates] = useState([])\n\tconst [usCurrent, setUSCurrent] = useState([])\n\tconst [usHistoric, setUSHistoric] = useState([])\n\n\t// * Effect\n\tuseEffect(() => {\n\t\tfetch(urlStates)\n\t\t\t.then(res => res.json())\n\t\t\t.then((json = []) => {\n\t\t\t\tsetCurrentStates(\n\t\t\t\t\tjson.map(state => ({\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\tdeathRate:\n\t\t\t\t\t\t\tstate.death && state.positive\n\t\t\t\t\t\t\t\t? ((state.death / state.positive) * 100).toFixed(2)\n\t\t\t\t\t\t\t\t: 0\n\t\t\t\t\t}))\n\t\t\t\t)\n\t\t\t})\n\t\t\t.catch(err => console.error(err))\n\n\t\tfetch(urlDaily)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => setHistoricStates(json))\n\t\t\t.catch(err => console.error(err))\n\n\t\tfetch(urlInfo)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tsetInfoStates(\n\t\t\t\t\tjson.sort((a, b) => {\n\t\t\t\t\t\tif (a.state < b.state) return -1\n\t\t\t\t\t\tif (b.state < a.state) return 1\n\t\t\t\t\t\treturn 0\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t})\n\t\t\t.catch(err => console.error(err))\n\n\t\tfetch(urlUSCurrent)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => setUSCurrent(json))\n\t\t\t.catch(err => console.error(err))\n\n\t\tfetch(urlUSHistoric)\n\t\t\t.then(res => res.json())\n\t\t\t.then((json = []) => {\n\t\t\t\tsetUSHistoric(\n\t\t\t\t\tjson.map(day => ({\n\t\t\t\t\t\t...day,\n\t\t\t\t\t\tdeathRate:\n\t\t\t\t\t\t\tday.death && day.positive\n\t\t\t\t\t\t\t\t? ((day.death / day.positive) * 100).toFixed(2)\n\t\t\t\t\t\t\t\t: 0\n\t\t\t\t\t}))\n\t\t\t\t)\n\t\t\t})\n\t\t\t.catch(err => console.error(err))\n\t}, [])\n\n\treturn (\n\t\t<Dashboard\n\t\t\tstatesCurrent={statesCurrent}\n\t\t\tstatesHistoric={statesHistoric}\n\t\t\tstatesInfo={statesInfo}\n\t\t\tusCurrent={usCurrent}\n\t\t\tusHistoric={usHistoric}\n\t\t/>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'components/app/App'\nimport * as serviceWorker from './serviceWorker'\nimport './index.css'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}