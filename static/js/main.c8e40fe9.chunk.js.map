{"version":3,"sources":["data/apiLinks.js","components/footer/Footer.js","components/chart/ChartFilters.js","components/chart/Chart.js","components/headerBar/HeaderBar.js","components/pieChartDisplay/PieChartDisplay.js","components/sideDrawer/SideDrawer.js","components/stateInfo/StateInfo.js","components/tableDisplay/TableFilters.js","components/tableDisplay/TableDisplay.js","components/dashboard/Dashboard.js","components/app/App.js","serviceWorker.js","index.js"],"names":["BASE_URL","urlStates","urlDaily","urlInfo","urlUSCurrent","urlUSHistoric","Footer","Typography","variant","color","align","Link","href","style","fontStyle","useStyles","makeStyles","chartInputs","marginBottom","display","flexDirection","chartInput","margin","padding","ChartFilters","props","chartDisplay","chartDateRange","changeChartDisplay","changeChartDateRange","classes","className","FormControl","Select","native","value","onChange","inputProps","name","id","defaultProps","selectStateCurrent","selectStateHistory","Chart","theme","useTheme","displayType","isAreaChart","includes","data","filter","day","dayObj","dateType","lastWeek","moment","subtract","dateChecked","isAfter","lastMonth","filterDateRange","slice","reverse","map","time","format","amount","xAxis","dataKey","stroke","palette","text","secondary","yAxis","tickFormatter","tick","isNaN","toLocaleString","angle","position","textAnchor","fill","primary","type","getYLabel","cartesianGrid","strokeDasharray","toolTip","formatter","chartGradients","x1","y1","x2","y2","offset","stopColor","main","stopOpacity","minHeight","top","right","bottom","left","fillOpacity","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","stateInput","background","toolbar","paddingRight","menuButton","marginRight","breakpoints","down","menuButtonHidden","title","flexGrow","HeaderBar","sideOpen","selectState","handleDrawerOpen","statesInfo","changeState","AppBar","clsx","Toolbar","component","noWrap","target","info","key","state","getRand","Math","floor","random","PieChartDisplay","statesCurrent","s","positive","height","nameKey","_","index","rand1","rand2","rand3","fillColor","drawerPaper","whiteSpace","overflowY","drawerPaperClose","overflowX","spacing","up","listItem","cursor","listItemSelected","toolbarIcon","alignItems","justifyContent","SideDrawer","handleDrawerClose","Drawer","paper","open","IconButton","onClick","Divider","List","ListItem","selected","label","formatLink","link","linkStyle","notes","StateInfo","selectStateInfo","formatTitle","primaryLink","covid19Site","secondaryLink","covid19SiteSecondary","twitterLink","handle","replace","formatTwitter","twitter","grade","death","hospitalized","maxWidth","TableFilters","tableDisplay","changeTableDisplay","sortingColumnHeader","TableDisplay","useState","sortOrder","setSortOrder","changeSortOrder","stateData","sort","a","b","table","Table","size","TableHead","TableRow","TableCell","TableBody","row","hash","positiveIncrease","negative","negativeIncrease","totalTestResults","totalTestResultsIncrease","round","deathIncrease","hospitalizedIncrease","root","appBarSpacer","mixins","content","overflow","container","paddingTop","paddingBottom","chartPaper","tablePaper","Dashboard","statesHistoric","usCurrent","usHistoric","setSelectedState","setChartDisplay","setChartDateRange","setTableDisplay","React","setOpen","find","CssBaseline","stateAbr","Container","Grid","item","xs","md","lg","Paper","Box","pt","App","setCurrentStates","setHistoricStates","setInfoStates","setUSCurrent","setUSHistoric","useEffect","fetch","then","res","json","catch","err","console","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c8e40fe9.chunk.js","sourcesContent":["const BASE_URL = 'https://covidtracking.com/api'\n\nexport const urlStates = `${BASE_URL}/states`\nexport const urlDaily = `${BASE_URL}/states/daily`\nexport const urlInfo = `${BASE_URL}/states/info`\nexport const urlUSCurrent = `${BASE_URL}/us`\nexport const urlUSHistoric = `${BASE_URL}/us/daily`\nexport const urlCounties = `${BASE_URL}/counties`\nexport const urlTrackers = `${BASE_URL}/urls`\nexport const urlStateScreenshots = `${BASE_URL}/screenshots`\nexport const urlPress = `${BASE_URL}/press`\n","import React, { Fragment } from 'react'\nimport Link from '@material-ui/core/Link'\nimport Typography from '@material-ui/core/Typography'\n\nconst Footer = () => (\n\t<Fragment>\n\t\t<Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n\t\t\t<Link color=\"inherit\" href=\"https://github.com/perryf/covid-tracker\">\n\t\t\t\tUS COVID 19 Tracker Source Code\n\t\t\t</Link>\n\t\t\t<span style={{ fontStyle: 'italic' }}> © Perry Fustero 2020</span>\n\t\t</Typography>\n\t\t<Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n\t\t\t{'All data from '}\n\t\t\t<Link color=\"inherit\" href=\"https://covidtracking.com/\">\n\t\t\t\tThe COVID Tracking Project\n\t\t\t</Link>\n\t\t</Typography>\n\t</Fragment>\n)\n\nexport default Footer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\n\nconst useStyles = makeStyles({\n\tchartInputs: {\n\t\tmarginBottom: 6,\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row'\n\t},\n\tchartInput: {\n\t\tmargin: '0 6px',\n\t\tpadding: 2\n\t}\n})\n\nconst ChartFilters = props => {\n\tconst {\n\t\tchartDisplay,\n\t\tchartDateRange,\n\t\tchangeChartDisplay,\n\t\tchangeChartDateRange\n\t} = props\n\n\tconst classes = useStyles()\n\n\treturn (\n\t\t<div className={classes.chartInputs}>\n\t\t\t<FormControl>\n\t\t\t\t<Select\n\t\t\t\t\tnative\n\t\t\t\t\tvalue={chartDisplay}\n\t\t\t\t\tonChange={changeChartDisplay}\n\t\t\t\t\tclassName={classes.chartInput}\n\t\t\t\t\tinputProps={{\n\t\t\t\t\t\tname: 'display',\n\t\t\t\t\t\tid: 'chartDisplayOptions'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<option value=\"positive\">Total Positive</option>\n\t\t\t\t\t<option value=\"death\">Total Deaths</option>\n\t\t\t\t\t<option value=\"totalTestResults\">Total Tested</option>\n\t\t\t\t\t<option value=\"hospitalized\">Total Hospitalized</option>\n\t\t\t\t\t<option value=\"positiveIncrease\">Daily Positive Cases</option>\n\t\t\t\t\t<option value=\"deathIncrease\">Daily Deaths</option>\n\t\t\t\t\t<option value=\"totalTestResultsIncrease\">Daily Test Results</option>\n\t\t\t\t\t<option value=\"hospitalizedIncrease\">Daily Hospitalized</option>\n\t\t\t\t</Select>\n\t\t\t</FormControl>\n\n\t\t\t<FormControl>\n\t\t\t\t<Select\n\t\t\t\t\tnative\n\t\t\t\t\tvalue={chartDateRange}\n\t\t\t\t\tonChange={changeChartDateRange}\n\t\t\t\t\tclassName={classes.chartInput}\n\t\t\t\t\tinputProps={{\n\t\t\t\t\t\tname: 'date',\n\t\t\t\t\t\tid: 'chartDateOptions'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<option value=\"week\">Week</option>\n\t\t\t\t\t<option value=\"month\">Month</option>\n\t\t\t\t\t<option value=\"total\">All Time</option>\n\t\t\t\t</Select>\n\t\t\t</FormControl>\n\t\t</div>\n\t)\n}\n\nChartFilters.propTypes = {\n\tchartDisplay: PropTypes.string,\n\tchartDateRange: PropTypes.string,\n\tchangeChartDisplay: PropTypes.func.isRequired,\n\tchangeChartDateRange: PropTypes.func.isRequired\n}\n\nChartFilters.defaultProps = {\n\tchartDisplay: '',\n\tchartDateRange: '',\n\tselectStateCurrent: {},\n\tselectStateHistory: []\n}\n\nexport default ChartFilters\n","import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\nimport { useTheme } from '@material-ui/core/styles'\nimport {\n\tAreaChart,\n\tArea,\n\tBarChart,\n\tBar,\n\tXAxis,\n\tYAxis,\n\tLabel,\n\tCartesianGrid,\n\tTooltip,\n\tResponsiveContainer\n} from 'recharts'\nimport ChartFilters from './ChartFilters'\n\nconst getYLabel = type => {\n\tswitch (type) {\n\t\tcase 'positive':\n\t\t\treturn 'Total Tested Positive'\n\n\t\tcase 'death':\n\t\t\treturn 'Total Deaths'\n\n\t\tcase 'totalTestResults':\n\t\t\treturn 'Total Tested'\n\n\t\tcase 'hospitalized':\n\t\t\treturn 'Total Hospitalized'\n\n\t\tcase 'positiveIncrease':\n\t\t\treturn 'Daily Positive Cases'\n\n\t\tcase 'deathIncrease':\n\t\t\treturn 'Daily Deaths'\n\n\t\tcase 'totalTestResultsIncrease':\n\t\t\treturn 'Daily Test Results'\n\n\t\tcase 'hospitalizedIncrease':\n\t\t\treturn 'Daily Hospitalized'\n\n\t\tdefault:\n\t\t\treturn ''\n\t}\n}\n\nconst filterDateRange = (dayObj, dateType) => {\n\tswitch (dateType) {\n\t\tcase 'week':\n\t\t\tconst lastWeek = moment().subtract(7, 'days')\n\t\t\treturn moment(dayObj.dateChecked).isAfter(lastWeek)\n\n\t\tcase 'month':\n\t\t\tconst lastMonth = moment().subtract(1, 'months')\n\t\t\treturn moment(dayObj.dateChecked).isAfter(lastMonth)\n\n\t\tdefault:\n\t\t\treturn true\n\t}\n}\n\nconst createData = (time, amount) => {\n\treturn { time, amount }\n}\n\nconst Chart = props => {\n\tconst { selectStateHistory, chartDisplay, chartDateRange } = props\n\tconst theme = useTheme()\n\n\t// * Chart/Filter Display Options\n\tconst displayType = chartDisplay || 'positive'\n\tconst isAreaChart = !chartDisplay.includes('Increase')\n\n\t// * Chart Data\n\tconst data = selectStateHistory\n\t\t.filter(day => filterDateRange(day, chartDateRange))\n\t\t.slice()\n\t\t.reverse()\n\t\t.map(day => {\n\t\t\treturn createData(\n\t\t\t\tday.dateChecked ? moment(day.dateChecked).format('M/DD/YY') : '',\n\t\t\t\tday[displayType] || 0\n\t\t\t)\n\t\t})\n\n\t// * Chart Customized Inserts\n\tconst xAxis = <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\n\tconst yAxis = (\n\t\t<YAxis\n\t\t\tstroke={theme.palette.text.secondary}\n\t\t\ttickFormatter={tick => (!isNaN(tick) ? tick.toLocaleString() : '')}\n\t\t>\n\t\t\t<Label\n\t\t\t\tangle={270}\n\t\t\t\tposition=\"left\"\n\t\t\t\tstyle={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\n\t\t\t>\n\t\t\t\t{getYLabel(displayType)}\n\t\t\t</Label>\n\t\t</YAxis>\n\t)\n\tconst cartesianGrid = <CartesianGrid strokeDasharray=\"3 3\" />\n\tconst toolTip = (\n\t\t<Tooltip\n\t\t\tformatter={value => {\n\t\t\t\treturn !isNaN(value) ? value.toLocaleString() : ''\n\t\t\t}}\n\t\t/>\n\t)\n\n\t// * Chart Gradients (for Area Chart)\n\tconst chartGradients = (\n\t\t<defs>\n\t\t\t<linearGradient id=\"main\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n\t\t\t\t<stop\n\t\t\t\t\toffset=\"5%\"\n\t\t\t\t\tstopColor={theme.palette.primary.main}\n\t\t\t\t\tstopOpacity={0.8}\n\t\t\t\t/>\n\t\t\t\t<stop\n\t\t\t\t\toffset=\"95%\"\n\t\t\t\t\tstopColor={theme.palette.primary.main}\n\t\t\t\t\tstopOpacity={0}\n\t\t\t\t/>\n\t\t\t</linearGradient>\n\t\t</defs>\n\t)\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<ChartFilters {...props} />\n\n\t\t\t<ResponsiveContainer minHeight={290}>\n\t\t\t\t{isAreaChart ? (\n\t\t\t\t\t<AreaChart\n\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\tmargin={{ top: 8, right: 8, bottom: 0, left: 12 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{chartGradients}\n\t\t\t\t\t\t{xAxis}\n\t\t\t\t\t\t{yAxis}\n\t\t\t\t\t\t{cartesianGrid}\n\t\t\t\t\t\t{toolTip}\n\t\t\t\t\t\t<Area\n\t\t\t\t\t\t\ttype=\"linear\"\n\t\t\t\t\t\t\tdataKey=\"amount\"\n\t\t\t\t\t\t\tstroke={theme.palette.primary.main}\n\t\t\t\t\t\t\tfillOpacity={1}\n\t\t\t\t\t\t\tfill=\"url(#main)\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</AreaChart>\n\t\t\t\t) : (\n\t\t\t\t\t<BarChart\n\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\tmargin={{ top: 8, right: 8, bottom: 0, left: 12 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{xAxis}\n\t\t\t\t\t\t{yAxis}\n\t\t\t\t\t\t{cartesianGrid}\n\t\t\t\t\t\t{toolTip}\n\t\t\t\t\t\t<Bar dataKey=\"amount\" fill={theme.palette.primary.main} />\n\t\t\t\t\t</BarChart>\n\t\t\t\t)}\n\t\t\t</ResponsiveContainer>\n\t\t</Fragment>\n\t)\n}\n\nChart.propTypes = {\n\tselectStateHistory: PropTypes.array,\n\tchartDisplay: PropTypes.string,\n\tchartDateRange: PropTypes.string,\n\tchangeChartDisplay: PropTypes.func.isRequired, // * Passed down to Filters\n\tchangeChartDateRange: PropTypes.func.isRequired // * Passed down to Filters\n}\n\nChart.defaultProps = {\n\tchartDisplay: '',\n\tchartDateRange: '',\n\tselectStateHistory: []\n}\n\nexport default Chart\n\n// <LineChart\n// data={data}\n// margin={{ top: 8, right: 8, bottom: 0, left: 12 }}\n// >\n// {xAxis}\n// {yAxis}\n// {cartesianGrid}\n// {toolTip}\n// <Line\n// \ttype=\"linear\"\n// \tdataKey=\"amount\"\n// \tstroke={theme.palette.primary.main}\n// \tdot={false}\n// />\n// </LineChart>\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport FormControl from '@material-ui/core/FormControl'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Select from '@material-ui/core/Select'\nimport Typography from '@material-ui/core/Typography'\n\nconst drawerWidth = 240\n\nconst useStyles = makeStyles(theme => ({\n\tappBar: {\n\t\tzIndex: theme.zIndex.drawer + 1,\n\t\ttransition: theme.transitions.create(['width', 'margin'], {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.leavingScreen\n\t\t})\n\t},\n\tappBarShift: {\n\t\tmarginLeft: drawerWidth,\n\t\twidth: `calc(100% - ${drawerWidth}px)`,\n\t\ttransition: theme.transitions.create(['width', 'margin'], {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.enteringScreen\n\t\t})\n\t},\n\tstateInput: {\n\t\tmargin: '0 18px',\n\t\tpadding: '2px 12px',\n\t\tbackground: 'white'\n\t},\n\ttoolbar: {\n\t\tpaddingRight: 24 // keep right padding when drawer closed\n\t},\n\tmenuButton: {\n\t\tmarginRight: 36,\n\t\t[theme.breakpoints.down('xs')]: {\n\t\t\tdisplay: 'none'\n\t\t}\n\t},\n\tmenuButtonHidden: {\n\t\tdisplay: 'none'\n\t},\n\ttitle: {\n\t\tflexGrow: 1\n\t}\n}))\n\nconst HeaderBar = props => {\n\tconst {\n\t\tsideOpen,\n\t\thandleDrawerOpen,\n\t\tselectState,\n\t\tstatesInfo,\n\t\tchangeState\n\t} = props\n\tconst classes = useStyles()\n\n\tconst changeStateHelper = ({ target: { value } }) => {\n\t\tchangeState(value)\n\t}\n\n\treturn (\n\t\t<AppBar\n\t\t\tposition=\"absolute\"\n\t\t\tclassName={clsx(classes.appBar, sideOpen && classes.appBarShift)}\n\t\t>\n\t\t\t<Toolbar className={classes.toolbar} variant=\"dense\">\n\t\t\t\t{false && ( // * Delete if no longer needed\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tedge=\"start\"\n\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\taria-label=\"open drawer\"\n\t\t\t\t\t\tonClick={handleDrawerOpen}\n\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\tclasses.menuButton,\n\t\t\t\t\t\t\tsideOpen && classes.menuButtonHidden\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t)}\n\t\t\t\t<Typography\n\t\t\t\t\tcomponent=\"h1\"\n\t\t\t\t\tvariant=\"h6\"\n\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\tnoWrap\n\t\t\t\t\tclassName={classes.title}\n\t\t\t\t>\n\t\t\t\t\tUS COVID 19 Tracker\n\t\t\t\t</Typography>\n\n\t\t\t\t<FormControl>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tnative\n\t\t\t\t\t\tonChange={changeStateHelper}\n\t\t\t\t\t\tclassName={classes.stateInput}\n\t\t\t\t\t\tvalue={selectState}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\tname: 'stateDisplay',\n\t\t\t\t\t\t\tid: 'stateOptions'\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value={'us'}>USA</option>\n\t\t\t\t\t\t{statesInfo.map(info => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<option key={info.state} value={info.state}>\n\t\t\t\t\t\t\t\t\t{info.state}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</Select>\n\t\t\t\t</FormControl>\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t)\n}\n\nHeaderBar.propTypes = {\n\tselectState: PropTypes.string,\n\tstatesInfo: PropTypes.array,\n\tsideOpen: PropTypes.bool.isRequired,\n\thandleDrawerOpen: PropTypes.func.isRequired,\n\tchangeState: PropTypes.func.isRequired\n}\n\nHeaderBar.defaultProps = {\n\tselectState: '',\n\tstatesInfo: []\n}\n\nexport default HeaderBar\n","import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { ResponsiveContainer, PieChart, Pie, Tooltip, Cell } from 'recharts'\n\nconst getRand = () => {\n\treturn Math.floor(Math.random() * 120) + 80\n}\n\nconst createData = (name, value) => {\n\treturn { name, value }\n}\n\nconst PieChartDisplay = props => {\n\tconst { statesCurrent } = props\n\tconst theme = useTheme()\n\n\t// * Chart Data\n\tconst data = statesCurrent.map(s => createData(s.state, s.positive))\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Typography component=\"h4\" variant=\"subtitle1\" color=\"primary\">\n\t\t\t\tPositive Cases by state\n\t\t\t</Typography>\n\t\t\t<ResponsiveContainer minHeight={290}>\n\t\t\t\t<PieChart width={300} height={300}>\n\t\t\t\t\t<linearGradient id=\"main\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n\t\t\t\t\t\t<stop\n\t\t\t\t\t\t\toffset=\"5%\"\n\t\t\t\t\t\t\tstopColor={theme.palette.primary.main}\n\t\t\t\t\t\t\tstopOpacity={0.8}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<stop\n\t\t\t\t\t\t\toffset=\"95%\"\n\t\t\t\t\t\t\tstopColor={theme.palette.primary.main}\n\t\t\t\t\t\t\tstopOpacity={0}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</linearGradient>\n\n\t\t\t\t\t<Tooltip />\n\t\t\t\t\t<Pie data={data} dataKey=\"value\" nameKey=\"name\" fill=\"url(#main)\">\n\t\t\t\t\t\t{data.map((_, index) => {\n\t\t\t\t\t\t\tconst rand1 = getRand()\n\t\t\t\t\t\t\tconst rand2 = getRand()\n\t\t\t\t\t\t\tconst rand3 = getRand()\n\t\t\t\t\t\t\tconst fillColor = `rgb(${rand1}, ${rand2}, ${rand3})`\n\n\t\t\t\t\t\t\treturn <Cell key={`cell-${index}`} fill={fillColor} />\n\t\t\t\t\t\t})}\n\t\t\t\t\t</Pie>\n\t\t\t\t</PieChart>\n\t\t\t</ResponsiveContainer>\n\t\t</Fragment>\n\t)\n}\n\nPieChartDisplay.propTypes = {\n\tstatesCurrent: PropTypes.array\n}\n\nPieChartDisplay.defaultProps = {\n\tstatesCurrent: []\n}\n\nexport default PieChartDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport Divider from '@material-ui/core/Divider'\nimport Drawer from '@material-ui/core/Drawer'\nimport IconButton from '@material-ui/core/IconButton'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\n\nconst drawerWidth = 240\n\nconst useStyles = makeStyles(theme => ({\n\tdrawerPaper: {\n\t\tposition: 'relative',\n\t\twhiteSpace: 'nowrap',\n\t\twidth: drawerWidth,\n\t\ttransition: theme.transitions.create('width', {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.enteringScreen\n\t\t}),\n\t\theight: '100vh',\n\t\toverflowY: 'scroll'\n\t},\n\tdrawerPaperClose: {\n\t\toverflowX: 'hidden',\n\t\ttransition: theme.transitions.create('width', {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.leavingScreen\n\t\t}),\n\t\twidth: theme.spacing(7),\n\t\t[theme.breakpoints.up('xs')]: {\n\t\t\twidth: theme.spacing(9)\n\t\t}\n\t},\n\tlistItem: {\n\t\tcursor: 'pointer',\n\t\t'&:hover': {\n\t\t\tbackground: '#ddd'\n\t\t}\n\t},\n\tlistItemSelected: {\n\t\tbackground: '#dde'\n\t},\n\ttoolbarIcon: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'flex-end',\n\t\tminHeight: 48\n\t}\n}))\n\nconst SideDrawer = props => {\n\tconst {\n\t\tselectState,\n\t\tsideOpen,\n\t\tstatesInfo,\n\t\tchangeState,\n\t\thandleDrawerClose\n\t} = props\n\tconst classes = useStyles()\n\n\treturn (\n\t\t<Drawer\n\t\t\tvariant=\"permanent\"\n\t\t\tclasses={{\n\t\t\t\tpaper: clsx(classes.drawerPaper, !sideOpen && classes.drawerPaperClose)\n\t\t\t}}\n\t\t\topen={sideOpen}\n\t\t>\n\t\t\t<div className={classes.toolbarIcon}>\n\t\t\t\t<IconButton onClick={handleDrawerClose}>\n\t\t\t\t\t<ChevronLeftIcon />\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t\t<Divider />\n\t\t\t<List>\n\t\t\t\t<ListItem\n\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\tclasses.listItem,\n\t\t\t\t\t\tselectState === 'us' && classes.listItemSelected\n\t\t\t\t\t)}\n\t\t\t\t\tonClick={() => changeState('us')}\n\t\t\t\t>\n\t\t\t\t\tUSA\n\t\t\t\t</ListItem>\n\t\t\t\t{statesInfo.map(info => {\n\t\t\t\t\tconst selected = info.state === selectState\n\t\t\t\t\tconst label = sideOpen\n\t\t\t\t\t\t? `${info.name || ''} ${info.state ? `(${info.state})` : ''}`\n\t\t\t\t\t\t: info.state\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\tkey={info.state}\n\t\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\tclasses.listItem,\n\t\t\t\t\t\t\t\tselected && classes.listItemSelected\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tonClick={() => changeState(info.state)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</List>\n\t\t</Drawer>\n\t)\n}\n\nSideDrawer.propTypes = {\n\tselectState: PropTypes.string,\n\tsideOpen: PropTypes.bool.isRequired,\n\tstatesInfo: PropTypes.array,\n\tchangeState: PropTypes.func.isRequired,\n\thandleDrawerClose: PropTypes.func.isRequired\n}\n\nSideDrawer.defaultProps = {\n\tselectState: '',\n\tstatesInfo: []\n}\n\nexport default SideDrawer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Link from '@material-ui/core/Link'\nimport Typography from '@material-ui/core/Typography'\n\nconst TWITTER_URL = 'https://twitter.com'\n\nconst formatLink = link => {\n\treturn link ? (\n\t\t<Link color=\"inherit\" href={link}>\n\t\t\t{link}\n\t\t</Link>\n\t) : (\n\t\t''\n\t)\n}\n\nconst formatTwitter = handle => {\n\tif (!handle) return ''\n\n\tconst twitterLink = `${TWITTER_URL}/${handle.replace('@', '')}`\n\n\treturn handle ? (\n\t\t<Link color=\"inherit\" href={twitterLink}>\n\t\t\t{twitterLink}\n\t\t</Link>\n\t) : (\n\t\t''\n\t)\n}\n\nconst formatTitle = (selectState, info) => {\n\tif (selectState === 'us') {\n\t\treturn 'USA'\n\t}\n\tif (info.name) {\n\t\treturn `${info.name} (${info.state})`\n\t}\n\treturn 'Select a State'\n}\n\nconst useStyles = makeStyles({\n\tlinkStyle: {\n\t\tcolor: '#e33371'\n\t},\n\tnotes: {\n\t\tmargin: 4,\n\t\tfontStyle: 'italic'\n\t}\n})\n\nconst StateInfo = props => {\n\tconst { selectStateInfo, selectStateCurrent, selectState } = props\n\n\tconst classes = useStyles()\n\tconst title = formatTitle(selectState, selectStateInfo)\n\tconst primaryLink = formatLink(selectStateInfo.covid19Site)\n\tconst secondaryLink = formatLink(selectStateInfo.covid19SiteSecondary)\n\tconst twitterLink = formatTwitter(selectStateInfo.twitter)\n\n\treturn (\n\t\t<div>\n\t\t\t<Typography component=\"h2\" variant=\"h6\" color=\"primary\">\n\t\t\t\t{title}\n\t\t\t</Typography>\n\t\t\t{selectStateCurrent.grade && (\n\t\t\t\t<Typography component=\"p\" variant=\"caption\" color=\"textSecondary\">\n\t\t\t\t\tData quality grade: {selectStateCurrent.grade}\n\t\t\t\t</Typography>\n\t\t\t)}\n\n\t\t\t<Typography component=\"p\" variant=\"body1\" color=\"textPrimary\">\n\t\t\t\tTotal Positive Cases:{' '}\n\t\t\t\t{selectStateCurrent.positive\n\t\t\t\t\t? selectStateCurrent.positive.toLocaleString()\n\t\t\t\t\t: 0}\n\t\t\t</Typography>\n\n\t\t\t<Typography component=\"p\" variant=\"body1\" color=\"textPrimary\">\n\t\t\t\tTotal Deaths:{' '}\n\t\t\t\t{selectStateCurrent.death\n\t\t\t\t\t? selectStateCurrent.death.toLocaleString()\n\t\t\t\t\t: 0}\n\t\t\t</Typography>\n\n\t\t\t<Typography component=\"p\" variant=\"body1\" color=\"textPrimary\">\n\t\t\t\tTotal Hospitalized:{' '}\n\t\t\t\t{selectStateCurrent.hospitalized\n\t\t\t\t\t? selectStateCurrent.hospitalized.toLocaleString()\n\t\t\t\t\t: 0}\n\t\t\t</Typography>\n\n\t\t\t<div className={classes.linkStyle}>{primaryLink}</div>\n\t\t\t<div className={classes.linkStyle}>{secondaryLink}</div>\n\t\t\t<div className={classes.linkStyle}>{twitterLink}</div>\n\n\t\t\t<p className={classes.notes}>{selectStateInfo.notes || ''}</p>\n\t\t</div>\n\t)\n}\nStateInfo.propTypes = {\n\tselectState: PropTypes.string,\n\tselectStateInfo: PropTypes.object,\n\tselectStateCurrent: PropTypes.object\n}\n\nStateInfo.defaultProps = {\n\tselectState: '',\n\tselectStateInfo: {},\n\tselectStateCurrent: {}\n}\n\nexport default StateInfo\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\n\nconst useStyles = makeStyles({\n\tchartInput: {\n\t\tmargin: '0 6px',\n\t\tpadding: 2,\n\t\twidth: '40%',\n\t\tmaxWidth: 250\n\t}\n})\n\nconst TableFilters = props => {\n\tconst { tableDisplay, changeTableDisplay } = props\n\tconst classes = useStyles()\n\n\treturn (\n\t\t<FormControl>\n\t\t\t<Select\n\t\t\t\tnative\n\t\t\t\tvalue={tableDisplay}\n\t\t\t\tonChange={changeTableDisplay}\n\t\t\t\tclassName={classes.chartInput}\n\t\t\t\tinputProps={{\n\t\t\t\t\tname: 'tableDisplay',\n\t\t\t\t\tid: 'tableDisplayOptions'\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<option value=\"history\">History</option>\n\t\t\t\t<option value=\"allStates\">All States</option>\n\t\t\t</Select>\n\t\t</FormControl>\n\t)\n}\n\nTableFilters.propTypes = {\n\ttableDisplay: PropTypes.string,\n\tchangeTableDisplay: PropTypes.func.isRequired\n}\n\nTableFilters.defaultProps = {\n\ttableDisplay: ''\n}\n\nexport default TableFilters\n","import React, { Fragment, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Typography from '@material-ui/core/Typography'\nimport TableFilters from '../tableDisplay/TableFilters'\n\nconst useStyles = makeStyles({\n\tsortingColumnHeader: {\n\t\tcursor: 'pointer',\n\t\tcolor: '#00796b'\n\t}\n})\n\nconst TableDisplay = props => {\n\tconst {\n\t\tselectStateHistory,\n\t\tstatesCurrent,\n\t\ttableDisplay,\n\t\tchangeTableDisplay\n\t} = props\n\n\tconst [sortOrder, setSortOrder] = useState('positive')\n\n\tconst changeSortOrder = name => {\n\t\tsetSortOrder(name)\n\t}\n\n\tconst classes = useStyles()\n\n\tconst stateData = statesCurrent.slice().sort((a, b) => {\n\t\tif (sortOrder === 'state') {\n\t\t\tif (a[sortOrder] < b[sortOrder]) return -1\n\t\t\tif (b[sortOrder] < a[sortOrder]) return 1\n\t\t} else {\n\t\t\tif (a[sortOrder] < b[sortOrder]) return 1\n\t\t\tif (b[sortOrder] < a[sortOrder]) return -1\n\t\t}\n\t\treturn 0\n\t})\n\n\tconst table =\n\t\ttableDisplay === 'history' ? (\n\t\t\t// * HISTORY\n\t\t\t<Table size=\"medium\">\n\t\t\t\t<TableHead>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableCell>Date</TableCell>\n\t\t\t\t\t\t<TableCell>Tested Positive</TableCell>\n\t\t\t\t\t\t<TableCell>Negative Tests</TableCell>\n\t\t\t\t\t\t<TableCell>Total Tested</TableCell>\n\t\t\t\t\t\t<TableCell>Percent Positive</TableCell>\n\t\t\t\t\t\t<TableCell>Deaths</TableCell>\n\t\t\t\t\t\t<TableCell>Hospitalized</TableCell>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableHead>\n\n\t\t\t\t<TableBody>\n\t\t\t\t\t{selectStateHistory.map(row => (\n\t\t\t\t\t\t<TableRow key={row.hash}>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.dateChecked\n\t\t\t\t\t\t\t\t\t? moment(row.dateChecked).format('MM/DD/YYYY')\n\t\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.positive ? row.positive.toLocaleString() : 0} (+\n\t\t\t\t\t\t\t\t{row.positiveIncrease\n\t\t\t\t\t\t\t\t\t? row.positiveIncrease.toLocaleString()\n\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.negative ? row.negative.toLocaleString() : 0} (+\n\t\t\t\t\t\t\t\t{row.negativeIncrease\n\t\t\t\t\t\t\t\t\t? row.negativeIncrease.toLocaleString()\n\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.totalTestResults\n\t\t\t\t\t\t\t\t\t? row.totalTestResults.toLocaleString()\n\t\t\t\t\t\t\t\t\t: 0}{' '}\n\t\t\t\t\t\t\t\t(+\n\t\t\t\t\t\t\t\t{row.totalTestResultsIncrease\n\t\t\t\t\t\t\t\t\t? row.totalTestResultsIncrease.toLocaleString()\n\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.positive && row.totalTestResults\n\t\t\t\t\t\t\t\t\t? `${Math.round(\n\t\t\t\t\t\t\t\t\t\t\t(row.positive / row.totalTestResults) * 100,\n\t\t\t\t\t\t\t\t\t\t\t2\n\t\t\t\t\t\t\t\t\t  )}%`\n\t\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.death ? row.death.toLocaleString() : 0} (+\n\t\t\t\t\t\t\t\t{row.deathIncrease ? row.deathIncrease.toLocaleString() : 0})\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.hospitalized ? row.hospitalized.toLocaleString() : 0} (+\n\t\t\t\t\t\t\t\t{row.hospitalizedIncrease\n\t\t\t\t\t\t\t\t\t? row.hospitalizedIncrease.toLocaleString()\n\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t))}\n\t\t\t\t</TableBody>\n\t\t\t</Table>\n\t\t) : (\n\t\t\t// * STATES\n\t\t\t<Table size=\"medium\">\n\t\t\t\t<TableHead>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={classes.sortingColumnHeader}\n\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('state')}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tState\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={classes.sortingColumnHeader}\n\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('positive')}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tTested Positive\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={classes.sortingColumnHeader}\n\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('negative')}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tNegative Tests\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={classes.sortingColumnHeader}\n\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('totalTestResults')}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tTotal Tested\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell>Percent Positive</TableCell>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={classes.sortingColumnHeader}\n\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('death')}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tDeaths\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={classes.sortingColumnHeader}\n\t\t\t\t\t\t\t\tonClick={() => changeSortOrder('hospitalized')}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tHospitalized\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableHead>\n\n\t\t\t\t<TableBody>\n\t\t\t\t\t{stateData.map(row => (\n\t\t\t\t\t\t<TableRow key={row.hash}>\n\t\t\t\t\t\t\t<TableCell>{row.state}</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.positive ? row.positive.toLocaleString() : ''} (+\n\t\t\t\t\t\t\t\t{row.positiveIncrease\n\t\t\t\t\t\t\t\t\t? row.positiveIncrease.toLocaleString()\n\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.negative ? row.negative.toLocaleString() : ''} (+\n\t\t\t\t\t\t\t\t{row.negativeIncrease\n\t\t\t\t\t\t\t\t\t? row.negativeIncrease.toLocaleString()\n\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.totalTestResults\n\t\t\t\t\t\t\t\t\t? row.totalTestResults.toLocaleString()\n\t\t\t\t\t\t\t\t\t: ''}{' '}\n\t\t\t\t\t\t\t\t(+\n\t\t\t\t\t\t\t\t{row.totalTestResultsIncrease || 0})\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.positive && row.totalTestResults\n\t\t\t\t\t\t\t\t\t? `${Math.round(\n\t\t\t\t\t\t\t\t\t\t\t(row.positive / row.totalTestResults) * 100,\n\t\t\t\t\t\t\t\t\t\t\t2\n\t\t\t\t\t\t\t\t\t  )}%`\n\t\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.death ? row.death.toLocaleString() : 0} (+\n\t\t\t\t\t\t\t\t{row.deathIncrease ? row.deathIncrease.toLocaleString() : 0})\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{row.hospitalized ? row.hospitalized.toLocaleString() : 0} (+\n\t\t\t\t\t\t\t\t{row.hospitalizedIncrease\n\t\t\t\t\t\t\t\t\t? row.hospitalizedIncrease.toLocaleString()\n\t\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t))}\n\t\t\t\t</TableBody>\n\t\t\t</Table>\n\t\t)\n\n\treturn (\n\t\t<Fragment>\n\t\t\t{false && ( // * Remove if no longer needed\n\t\t\t\t<Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n\t\t\t\t\tHistory\n\t\t\t\t</Typography>\n\t\t\t)}\n\n\t\t\t<TableFilters\n\t\t\t\ttableDisplay={tableDisplay}\n\t\t\t\tchangeTableDisplay={changeTableDisplay}\n\t\t\t/>\n\n\t\t\t{table}\n\t\t</Fragment>\n\t)\n}\n\nTableDisplay.propTypes = {\n\tselectStateHistory: PropTypes.array,\n\tstatesCurrent: PropTypes.array,\n\ttableDisplay: PropTypes.string,\n\tchangeTableDisplay: PropTypes.func.isRequired\n}\n\nTableDisplay.defaultProps = {\n\tselectStateHistory: [],\n\tstatesCurrent: [],\n\ttableDisplay: 'history'\n}\n\nexport default TableDisplay\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Container from '@material-ui/core/Container'\nimport Footer from '../footer/Footer'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport Chart from '../chart/Chart'\nimport HeaderBar from '../headerBar/HeaderBar'\nimport PieChartDisplay from '../pieChartDisplay/PieChartDisplay'\nimport SideDrawer from '../sideDrawer/SideDrawer'\nimport StateInfo from '../stateInfo/StateInfo'\nimport TableDisplay from '../tableDisplay/TableDisplay'\n\nconst useStyles = makeStyles(theme => ({\n\troot: {\n\t\tdisplay: 'flex'\n\t},\n\tappBarSpacer: theme.mixins.toolbar, // Moves main down by amount appBar takes up\n\tcontent: {\n\t\tflexGrow: 1,\n\t\theight: '100vh',\n\t\toverflow: 'auto'\n\t},\n\tcontainer: {\n\t\tpaddingTop: theme.spacing(1),\n\t\tpaddingBottom: theme.spacing(1)\n\t},\n\tpaper: {\n\t\tpadding: theme.spacing(2),\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column'\n\t},\n\tchartPaper: {\n\t\theight: 360\n\t},\n\ttablePaper: {\n\t\toverflow: 'auto'\n\t}\n}))\n\nconst Dashboard = props => {\n\tconst {\n\t\tstatesCurrent,\n\t\tstatesHistoric,\n\t\tstatesInfo,\n\t\tusCurrent,\n\t\tusHistoric\n\t} = props\n\n\t// * STATE\n\tconst [selectState, setSelectedState] = useState('us')\n\tconst [chartDisplay, setChartDisplay] = useState('positive')\n\tconst [chartDateRange, setChartDateRange] = useState('total')\n\tconst [tableDisplay, setTableDisplay] = useState('history')\n\tconst [sideOpen, setOpen] = React.useState(false)\n\n\t// * METHODS\n\tconst changeState = stateAbr => {\n\t\tsetSelectedState(stateAbr)\n\t}\n\tconst changeChartDisplay = ({ target: { value } }) => {\n\t\tsetChartDisplay(value)\n\t}\n\tconst changeChartDateRange = ({ target: { value } }) => {\n\t\tsetChartDateRange(value)\n\t}\n\tconst changeTableDisplay = ({ target: { value } }) => {\n\t\tsetTableDisplay(value)\n\t}\n\tconst handleDrawerClose = () => {\n\t\tsetOpen(false)\n\t}\n\tconst handleDrawerOpen = () => {\n\t\tsetOpen(true)\n\t}\n\n\t// * STYLES\n\tconst classes = useStyles()\n\n\t// * INCLUDES US TOTALS WITH STATES\n\tconst selectStateCurrent =\n\t\tselectState === 'us'\n\t\t\t? usCurrent[0]\n\t\t\t: statesCurrent.find(s => s.state === selectState)\n\tconst selectStateHistory =\n\t\tselectState === 'us'\n\t\t\t? usHistoric\n\t\t\t: statesHistoric.filter(s => s.state === selectState)\n\tconst selectStateInfo = statesInfo.find(s => s.state === selectState)\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<CssBaseline />\n\t\t\t<HeaderBar\n\t\t\t\tsideOpen={sideOpen}\n\t\t\t\thandleDrawerOpen={handleDrawerOpen}\n\t\t\t\tstatesInfo={statesInfo}\n\t\t\t\tselectState={selectState}\n\t\t\t\tchangeState={changeState}\n\t\t\t/>\n\n\t\t\t{/* Sidebar */}\n\t\t\t{false && ( // * Moved to input in header - delete if no longer needed\n\t\t\t\t<SideDrawer\n\t\t\t\t\tsideOpen={sideOpen}\n\t\t\t\t\tstatesInfo={statesInfo}\n\t\t\t\t\tselectState={selectState}\n\t\t\t\t\tchangeState={changeState}\n\t\t\t\t\thandleDrawerClose={handleDrawerClose}\n\t\t\t\t/>\n\t\t\t)}\n\n\t\t\t<main className={classes.content}>\n\t\t\t\t<div className={classes.appBarSpacer} />\n\t\t\t\t<Container maxWidth=\"lg\" className={classes.container}>\n\t\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t\t{/* StateInfo */}\n\t\t\t\t\t\t<Grid item xs={12} md={12} lg={12}>\n\t\t\t\t\t\t\t<StateInfo\n\t\t\t\t\t\t\t\tselectState={selectState}\n\t\t\t\t\t\t\t\tselectStateInfo={selectStateInfo}\n\t\t\t\t\t\t\t\tselectStateCurrent={selectStateCurrent}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t{/* Pie Chart (Only on US View) */}\n\t\t\t\t\t\t{false && ( // * Maybe add in later\n\t\t\t\t\t\t\t<Grid item xs={6} md={6} lg={6}>\n\t\t\t\t\t\t\t\t<Paper className={clsx(classes.paper, classes.chartPaper)}>\n\t\t\t\t\t\t\t\t\t<PieChartDisplay statesCurrent={statesCurrent} />\n\t\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t{/* Chart */}\n\t\t\t\t\t\t<Grid item xs={12} md={12} lg={12}>\n\t\t\t\t\t\t\t<Paper className={clsx(classes.paper, classes.chartPaper)}>\n\t\t\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\t\t\tselectStateHistory={selectStateHistory}\n\t\t\t\t\t\t\t\t\tchartDisplay={chartDisplay}\n\t\t\t\t\t\t\t\t\tchartDateRange={chartDateRange}\n\t\t\t\t\t\t\t\t\tchangeChartDisplay={changeChartDisplay}\n\t\t\t\t\t\t\t\t\tchangeChartDateRange={changeChartDateRange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t{/* Recent Table */}\n\t\t\t\t\t\t<Grid item xs={12} md={12} lg={12}>\n\t\t\t\t\t\t\t<Paper className={clsx(classes.paper, classes.tablePaper)}>\n\t\t\t\t\t\t\t\t<TableDisplay\n\t\t\t\t\t\t\t\t\tselectStateHistory={selectStateHistory}\n\t\t\t\t\t\t\t\t\tstatesCurrent={statesCurrent}\n\t\t\t\t\t\t\t\t\ttableDisplay={tableDisplay}\n\t\t\t\t\t\t\t\t\tchangeTableDisplay={changeTableDisplay}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Box pt={4}>\n\t\t\t\t\t\t<Footer />\n\t\t\t\t\t</Box>\n\t\t\t\t</Container>\n\t\t\t</main>\n\t\t</div>\n\t)\n}\n\nDashboard.propTypes = {\n\tstatesCurrent: PropTypes.array,\n\tstatesHistoric: PropTypes.array,\n\tstatesInfo: PropTypes.array,\n\tusCurrent: PropTypes.array,\n\tusHistoric: PropTypes.array\n}\n\nDashboard.defaultProps = {\n\tstatesCurrent: [],\n\tstatesHistoric: [],\n\tstatesInfo: [],\n\tusCurrent: [],\n\tusHistoric: []\n}\n\nexport default Dashboard\n","import React, { useState, useEffect } from 'react'\nimport { urlStates, urlDaily, urlInfo, urlUSCurrent, urlUSHistoric } from 'data'\nimport Dashboard from '../dashboard/Dashboard'\nimport './App.css'\n\nconst App = () => {\n\t// * State Init\n\tconst [statesCurrent, setCurrentStates] = useState([])\n\tconst [statesHistoric, setHistoricStates] = useState([])\n\tconst [statesInfo, setInfoStates] = useState([])\n\tconst [usCurrent, setUSCurrent] = useState([])\n\tconst [usHistoric, setUSHistoric] = useState([])\n\n\t// * Effect\n\tuseEffect(() => {\n\t\tfetch(urlStates)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => setCurrentStates(json))\n\t\t\t.catch(err => console.info(err))\n\n\t\tfetch(urlDaily)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => setHistoricStates(json))\n\t\t\t.catch(err => console.info(err))\n\n\t\tfetch(urlInfo)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json =>\n\t\t\t\tsetInfoStates(\n\t\t\t\t\tjson.sort((a, b) => {\n\t\t\t\t\t\tif (a.state < b.state) return -1\n\t\t\t\t\t\tif (b.state < a.state) return 1\n\t\t\t\t\t\treturn 0\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t)\n\t\t\t.catch(err => console.info(err))\n\n\t\tfetch(urlUSCurrent)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => setUSCurrent(json))\n\t\t\t.catch(err => console.info(err))\n\n\t\tfetch(urlUSHistoric)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => setUSHistoric(json))\n\t\t\t.catch(err => console.info(err))\n\t}, [])\n\n\treturn (\n\t\t<Dashboard\n\t\t\tstatesCurrent={statesCurrent}\n\t\t\tstatesHistoric={statesHistoric}\n\t\t\tstatesInfo={statesInfo}\n\t\t\tusCurrent={usCurrent}\n\t\t\tusHistoric={usHistoric}\n\t\t/>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from 'components/app/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}